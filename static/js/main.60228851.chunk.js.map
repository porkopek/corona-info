{"version":3,"sources":["components/card-property.tsx","components/country-card.tsx","components/country-properties-sorter.tsx","models/country.ts","containers/countries-container.tsx","components/navbar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CardProperty","text","value","isActive","isNew","className","style","left","title","width","CountryCard","country","activeProperty","index","previousData","backgroundColor","src","countryInfo","flag","alt","isNewData","cases","toLocaleString","todayCases","deaths","todayDeaths","lethality","toFixed","casesPerOneMillion","deathsPerOneMillion","tests","testsPerOneMillion","PropertiesSorter","onSort","FormControl","variant","minWidth","InputLabel","id","Select","labelId","onChange","e","target","label","MenuItem","Country","recovered","critical","updated","active","this","track","NovelCovid","CountriesContainer","useState","countries","setCountries","JSON","parse","localStorage","getItem","setPreviousData","sortProperty","setSortProperty","useEffect","a","newData","filter","c","sort","b","map","Object","assign","length","countriesString","stringify","setItem","error","console","log","getCountries","data","property","sortFunction","newCountries","slice","oldCountries","CircularProgress","color","size","key","Navbar","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","theme","createMuiTheme","palette","primary","grey","secondary","main","success","red","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","reg"],"mappings":"gTACe,SAASA,EAAT,GAUX,IATFC,EASC,EATDA,KACAC,EAQC,EARDA,MAQC,IAPDC,gBAOC,aANDC,aAMC,SAED,OACE,yBACEC,UAAS,0DACPF,GAJc,YAGP,gBAIRC,EACC,yBACEC,UAAU,uBACVC,MAAO,CAAEC,MAAO,IAChBC,MAAM,8DAGR,yBAAKH,UAAU,kBAAkBC,MAAO,CAAEG,MAAO,MAEnD,8BAAOR,EAAP,KAEA,6BAAMC,I,MCnBG,SAASQ,EAAT,GAKO,IAAD,QAJnBC,EAImB,EAJnBA,QACAC,EAGmB,EAHnBA,eACAC,EAEmB,EAFnBA,MACAC,EACmB,EADnBA,aAEA,OACE,yBAAKT,UAAU,yGAEb,yBACEA,UAAU,8FACVC,MAAO,CAAES,gBAAiB,oBAE1B,0BAAMV,UAAU,WAAWC,MAAO,CAAEC,KAAM,SACvCM,EADH,KAGA,yBAAKG,IAAG,UAAEL,EAAQM,mBAAV,aAAE,EAAqBC,KAAMC,IAAI,GAAGd,UAAU,aACtD,4BAAKM,EAAQA,SACZA,EAAQS,WACP,yBACEf,UAAU,aACVG,MAAM,+DAKZ,yBAAKH,UAAU,aACb,kBAACL,EAAD,CACEC,KAAK,QACLC,MAAOS,EAAQU,MAAMC,iBACrBnB,SAA6B,UAAnBS,EACVR,OAAmB,OAAZU,QAAY,IAAZA,OAAA,EAAAA,EAAcO,SAAUV,EAAQU,QAEzC,kBAACrB,EAAD,CACEC,KAAK,cACLC,MAAK,UAAES,EAAQY,kBAAV,aAAE,EAAoBD,iBAC3BnB,SAA6B,eAAnBS,EACVR,OAAmB,OAAZU,QAAY,IAAZA,OAAA,EAAAA,EAAcS,cAAeZ,EAAQY,aAE9C,wBAAIlB,UAAU,SACd,kBAACL,EAAD,CACEC,KAAK,SACLC,MAAK,UAAES,EAAQa,cAAV,aAAE,EAAgBF,iBACvBnB,SAA6B,WAAnBS,EACVR,OAAmB,OAAZU,QAAY,IAAZA,OAAA,EAAAA,EAAcU,UAAWb,EAAQa,SAE1C,kBAACxB,EAAD,CACEC,KAAK,eACLC,MAAK,UAAES,EAAQc,mBAAV,aAAE,EAAqBH,iBAC5BnB,SAA6B,gBAAnBS,EACVR,OAAmB,OAAZU,QAAY,IAAZA,OAAA,EAAAA,EAAcW,eAAgBd,EAAQc,cAE/C,wBAAIpB,UAAU,SACd,kBAACL,EAAD,CACEC,KAAK,YACLC,MAAOS,EAAQe,UAAYf,EAAQe,UAAUC,QAAQ,GAAK,IAAM,KAChExB,SAA6B,cAAnBS,EACVR,OAAmB,OAAZU,QAAY,IAAZA,OAAA,EAAAA,EAAcY,aAAcf,EAAQe,YAE7C,kBAAC1B,EAAD,CACEC,KAAK,eACLC,MAAOS,EAAQiB,mBAAmBN,iBAClCnB,SAA6B,uBAAnBS,EACVR,OACc,OAAZU,QAAY,IAAZA,OAAA,EAAAA,EAAcc,sBAAuBjB,EAAQiB,qBAGjD,kBAAC5B,EAAD,CACEC,KAAK,gBACLC,MAAOS,EAAQkB,oBAAoBP,iBACnCnB,SAA6B,wBAAnBS,EACVR,OACc,OAAZU,QAAY,IAAZA,OAAA,EAAAA,EAAce,uBAAwBlB,EAAQkB,sBAGlD,6BACA,kBAAC7B,EAAD,CACEC,KAAK,QACLC,MAAOS,EAAQmB,MAAMR,iBACrBnB,SAA6B,UAAnBS,EACVR,OAAmB,OAAZU,QAAY,IAAZA,OAAA,EAAAA,EAAcgB,SAAUnB,EAAQmB,QAEzC,kBAAC9B,EAAD,CACEC,KAAK,eACLC,MAAOS,EAAQoB,mBAAmBT,iBAClCnB,SAA6B,uBAAnBS,EACVR,OACc,OAAZU,QAAY,IAAZA,OAAA,EAAAA,EAAciB,sBAAuBpB,EAAQoB,uB,wCCtF1C,SAASC,EAAT,GAA0D,IAA9BC,EAA6B,EAA7BA,OAMzC,OACE,yBAAK5B,UAAU,OACb,kBAAC6B,EAAA,EAAD,CAAaC,QAAQ,WAAW7B,MAAO,CAAE8B,SAAU,MACjD,kBAACC,EAAA,EAAD,CAAYC,GAAG,gBAAf,WACA,kBAACC,EAAA,EAAD,CACEC,QAAQ,eACRF,GAAG,SACHG,SAZW,SAACC,GAClB,IAAMxC,EAAQwC,EAAEC,OAAOzC,MAEvB+B,EAAO/B,IAUD0C,MAAM,WAEN,kBAACC,EAAA,EAAD,CAAU3C,MAAM,SAAhB,SACA,kBAAC2C,EAAA,EAAD,CAAU3C,MAAM,cAAhB,eACA,kBAAC2C,EAAA,EAAD,CAAU3C,MAAM,UAAhB,UACA,kBAAC2C,EAAA,EAAD,CAAU3C,MAAM,eAAhB,gBACA,6BACA,kBAAC2C,EAAA,EAAD,CAAU3C,MAAM,aAAhB,aAEA,kBAAC2C,EAAA,EAAD,CAAU3C,MAAM,sBAAhB,gBACA,kBAAC2C,EAAA,EAAD,CAAU3C,MAAM,uBAAhB,iBACA,6BACA,kBAAC2C,EAAA,EAAD,CAAU3C,MAAM,SAAhB,SACA,kBAAC2C,EAAA,EAAD,CAAU3C,MAAM,sBAAhB,mB,4BCvCW4C,E,iDAEnBnC,a,OACAM,iB,OAUAM,WAAqB,E,KACrBC,OAAiB,E,KACjBC,YAAsB,E,KACtBsB,UAAoB,E,KACpBC,SAAmB,E,KACnBnB,oBAA8B,E,KAC9BoB,QAAkB,E,KAClBnB,MAAgB,E,KAChBC,mBAA6B,E,KAC7BmB,OAAiB,E,KACjB7B,MAAgB,E,KAChBO,mBAA6B,E,KAC7BR,WAAqB,E,qDAKnB,OAAO,eAAK+B,KAAZ,CAAkBzB,UAAWyB,KAAKzB,c,gCAHlC,OAAOyB,KAAK3B,QAAU2B,KAAK9B,OAAU8B,KAAK3B,OAAS2B,KAAK9B,MAAS,Q,sBCnB/D+B,EAAQ,IAAIC,aACH,SAASC,IAAsB,IAAD,EACTC,mBAAoB,IADX,mBACpCC,EADoC,KACzBC,EADyB,OAEHF,mBACrCG,KAAKC,MAAMC,aAAaC,QAAQ,cAAgB,OAAuB,IAH/B,mBAEpC/C,EAFoC,KAEtBgD,EAFsB,OAKHP,mBAAwB,SALrB,mBAKpCQ,EALoC,KAKtBC,EALsB,KAO3CC,qBAAU,YAEU,uCAAG,8BAAAC,EAAA,sEACMd,EAAMI,YADZ,OAMnB,IALMW,EADa,OAEhBC,QAAO,SAACC,GAAD,OAAOA,EAAEhD,MAAQ,OACxBiD,MAAK,SAACJ,EAAGK,GAAJ,OAAUA,EAAElD,MAAQ6C,EAAE7C,SAC3BmD,KAAI,SAACH,GAAD,OAAOI,OAAOC,OAAO,IAAI5B,EAAWuB,OAE/BM,OACV,IACQC,EAAkBlB,KAAKmB,UAAUV,GACvCP,aAAakB,QAAQ,YAAaF,GAClCnB,EAAaU,GACb,MAAOY,GACPC,QAAQC,IAAIF,GAZG,2CAAH,qDAkBlBG,KACC,IAEH,IAYMC,EAAO3B,GAAa1C,EAC1B,OACE,oCACE,kBAACkB,EAAD,CAAkBC,OAfH,WAAwC,IAAvCmD,EAAsC,uDAAZ,QAC5CpB,EAAgBoB,GAChB,IAAMC,EAAe,SAACnB,EAAYK,GAChC,OAAIA,EAAEa,GAAYlB,EAAEkB,GAAkB,EAClCb,EAAEa,GAAYlB,EAAEkB,IAAmB,EAChC,GAELE,EAAe9B,EAAU+B,QAAQjB,KAAKe,GACtCG,EAAe1E,EAAayE,QAAQjB,KAAKe,GAC7C5B,EAAa6B,GACbxB,EAAgB0B,MAOI,KAAb,OAAJL,QAAI,IAAJA,OAAA,EAAAA,EAAMR,SACL,yBAAKtE,UAAU,oCACb,kBAACoF,EAAA,EAAD,CAAkBC,MAAM,UAAUC,KAAM,KACxC,0BAAMtF,UAAU,QAAhB,YAGJ,yBAAKA,UAAU,6CAAf,OACG8E,QADH,IACGA,OADH,EACGA,EAAMX,KAAI,SAAC7D,EAAS2B,GAAV,OACT,kBAAC5B,EAAD,CACEG,MAAOyB,EAAK,EACZ3B,QAASA,EACTiF,IAAKjF,EAAQA,QACbC,eAAgBmD,EAChBjD,aAAcA,EAAawB,UCpExB,SAASuD,IACtB,OACE,yBAAKxF,UAAU,+DACb,yBAAKA,UAAU,kEACb,yBAAKA,UAAU,oDACb,yBAAKW,IAAI,2BAA2BG,IAAI,GAAGd,UAAU,aACrD,0BAAMA,UAAU,0CAAhB,kBCQKyF,MAXf,WACE,OACE,yBAAKzF,UAAU,KACb,kBAACwF,EAAD,MACA,yBAAKxF,UAAU,wCACb,kBAACiD,EAAD,SCGFyC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BlC,QAAQC,IACN,iHAKEsB,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlB5B,QAAQC,IAAI,sCAGRsB,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAAAtC,GACLC,QAAQD,MAAM,4CAA6CA,M,qCC/F3DuC,EAAQC,YAAe,CAC3BC,QAAS,CACPC,QAASC,IAETC,UAAW,CACTC,KAAM,WAERC,QAASC,OAGbC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAkBX,MAAOA,GACvB,kBAAC,EAAD,QAGJY,SAASC,eAAe,SDEnB,SAAkB5B,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAI4B,IACpBC,eACApC,OAAOC,SAASoC,MAEJC,SAAWtC,OAAOC,SAASqC,OAIvC,OAGFtC,OAAOuC,iBAAiB,QAAQ,WAC9B,IAAMlC,EAAK,UAAM+B,eAAN,sBAEPtC,IAgEV,SAAiCO,EAAeC,GAE9CkC,MAAMnC,EAAO,CACXoC,QAAS,CAAE,iBAAkB,YAE5B/B,MAAK,SAAAgC,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CvC,UAAUC,cAAcuC,MAAMrC,MAAK,SAAAC,GACjCA,EAAaqC,aAAatC,MAAK,WAC7BV,OAAOC,SAASgD,eAKpB7C,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLrC,QAAQC,IACN,oEAvFAkE,CAAwB7C,EAAOC,GAI/BC,UAAUC,cAAcuC,MAAMrC,MAAK,WACjC3B,QAAQC,IACN,iHAMJoB,EAAgBC,EAAOC,OC3B/BE,CAAuB,CACrBU,SAAU,SAACiC,GAAD,OAAS,U","file":"static/js/main.60228851.chunk.js","sourcesContent":["import React from 'react';\r\nexport default function CardProperty({\r\n  text,\r\n  value,\r\n  isActive = false,\r\n  isNew = false,\r\n}: {\r\n  text: string;\r\n  value?: string;\r\n  isActive?: boolean;\r\n  isNew?: boolean;\r\n}) {\r\n  const activeState = 'font-bold';\r\n  return (\r\n    <div\r\n      className={`flex justify-between items-center relative pl-2 ${\r\n        isActive && activeState\r\n      } rounded-lg`}\r\n    >\r\n      {isNew ? (\r\n        <div\r\n          className=\"blob green absolute \"\r\n          style={{ left: -35 }}\r\n          title=\"there's new data since the last time you visited the site\"\r\n        ></div>\r\n      ) : (\r\n        <div className=\"absolute left-0\" style={{ width: 10 }}></div>\r\n      )}\r\n      <span>{text}:</span>\r\n\r\n      <div>{value}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport CardProperty from './card-property';\r\nimport Country from '../models/country';\r\nimport './country-card.css';\r\ninterface CountryCardProps {\r\n  country: Country;\r\n  previousData: Country;\r\n  activeProperty: keyof Country;\r\n  index: number;\r\n}\r\nexport default function CountryCard({\r\n  country,\r\n  activeProperty,\r\n  index,\r\n  previousData,\r\n}: CountryCardProps) {\r\n  return (\r\n    <div className=\"shadow rounded-md overflow-hidden hover:shadow-md  transition duration-300 ease-in-out cursor-pointer\">\r\n      {/* header */}\r\n      <div\r\n        className=\"w-full flex justify-center items-center p-5 font-bold uppercase text-black text-lg relative\"\r\n        style={{ backgroundColor: 'rgba(0,0,0,.04)' }}\r\n      >\r\n        <span className=\"absolute\" style={{ left: '2rem' }}>\r\n          {index}.\r\n        </span>\r\n        <img src={country.countryInfo?.flag} alt=\"\" className=\"h-4 mr-2\" />\r\n        <h3>{country.country}</h3>\r\n        {country.isNewData && (\r\n          <div\r\n            className=\"blob green\"\r\n            title=\"there is new data from the last time you visited the site\"\r\n          ></div>\r\n        )}\r\n      </div>\r\n      {/* body */}\r\n      <div className=\"px-6 py-2\">\r\n        <CardProperty\r\n          text=\"Cases\"\r\n          value={country.cases.toLocaleString()}\r\n          isActive={activeProperty === 'cases'}\r\n          isNew={previousData?.cases !== country.cases}\r\n        />\r\n        <CardProperty\r\n          text=\"Today cases\"\r\n          value={country.todayCases?.toLocaleString()}\r\n          isActive={activeProperty === 'todayCases'}\r\n          isNew={previousData?.todayCases !== country.todayCases}\r\n        />\r\n        <br className=\"my-3\" />\r\n        <CardProperty\r\n          text=\"Deaths\"\r\n          value={country.deaths?.toLocaleString()}\r\n          isActive={activeProperty === 'deaths'}\r\n          isNew={previousData?.deaths !== country.deaths}\r\n        />\r\n        <CardProperty\r\n          text=\"Today deaths\"\r\n          value={country.todayDeaths?.toLocaleString()}\r\n          isActive={activeProperty === 'todayDeaths'}\r\n          isNew={previousData?.todayDeaths !== country.todayDeaths}\r\n        />\r\n        <br className=\"my-3\" />\r\n        <CardProperty\r\n          text=\"Lethality\"\r\n          value={country.lethality ? country.lethality.toFixed(2) + '%' : '0%'}\r\n          isActive={activeProperty === 'lethality'}\r\n          isNew={previousData?.lethality !== country.lethality}\r\n        />\r\n        <CardProperty\r\n          text=\"Cases per 1M\"\r\n          value={country.casesPerOneMillion.toLocaleString()}\r\n          isActive={activeProperty === 'casesPerOneMillion'}\r\n          isNew={\r\n            previousData?.casesPerOneMillion !== country.casesPerOneMillion\r\n          }\r\n        />\r\n        <CardProperty\r\n          text=\"Deaths per 1M\"\r\n          value={country.deathsPerOneMillion.toLocaleString()}\r\n          isActive={activeProperty === 'deathsPerOneMillion'}\r\n          isNew={\r\n            previousData?.deathsPerOneMillion !== country.deathsPerOneMillion\r\n          }\r\n        />\r\n        <br />\r\n        <CardProperty\r\n          text=\"Tests\"\r\n          value={country.tests.toLocaleString()}\r\n          isActive={activeProperty === 'tests'}\r\n          isNew={previousData?.tests !== country.tests}\r\n        />\r\n        <CardProperty\r\n          text=\"Tests per 1M\"\r\n          value={country.testsPerOneMillion.toLocaleString()}\r\n          isActive={activeProperty === 'testsPerOneMillion'}\r\n          isNew={\r\n            previousData?.testsPerOneMillion !== country.testsPerOneMillion\r\n          }\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Country from '../models/country';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\ninterface FilterMenuOptions {\r\n  onSort: (property?: keyof Country, mode?: 'ASC' | 'DESC') => void;\r\n}\r\n\r\nexport default function PropertiesSorter({ onSort }: FilterMenuOptions) {\r\n  const handleSort = (e: React.ChangeEvent<{ value: unknown }>) => {\r\n    const value = e.target.value as keyof Country;\r\n\r\n    onSort(value);\r\n  };\r\n  return (\r\n    <div className=\"p-5\">\r\n      <FormControl variant=\"outlined\" style={{ minWidth: 180 }}>\r\n        <InputLabel id=\"select-label\">Sort by</InputLabel>\r\n        <Select\r\n          labelId=\"select-label\"\r\n          id=\"select\"\r\n          onChange={handleSort}\r\n          label=\"Sort by\"\r\n        >\r\n          <MenuItem value=\"cases\">cases</MenuItem>\r\n          <MenuItem value=\"todayCases\">today cases</MenuItem>\r\n          <MenuItem value=\"deaths\">deaths</MenuItem>\r\n          <MenuItem value=\"todayDeaths\">today deaths</MenuItem>\r\n          <br />\r\n          <MenuItem value=\"lethality\">lethality</MenuItem>\r\n\r\n          <MenuItem value=\"casesPerOneMillion\">cases per 1M</MenuItem>\r\n          <MenuItem value=\"deathsPerOneMillion\">deaths per 1M</MenuItem>\r\n          <br />\r\n          <MenuItem value=\"tests\">tests</MenuItem>\r\n          <MenuItem value=\"testsPerOneMillion\">tests per 1M</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n","export default class Country {\r\n  [key: string]: any;\r\n  country?: string;\r\n  countryInfo:\r\n    | {\r\n        _id: number | null;\r\n        latitude: number;\r\n        longitude: number;\r\n        flag: string;\r\n        iso3: string | null;\r\n        iso2: string | null;\r\n      }\r\n    | undefined;\r\n  todayCases: number = 0;\r\n  deaths: number = 0;\r\n  todayDeaths: number = 0;\r\n  recovered: number = 0;\r\n  critical: number = 0;\r\n  deathsPerOneMillion: number = 0;\r\n  updated: number = 0;\r\n  tests: number = 0;\r\n  testsPerOneMillion: number = 0;\r\n  active: number = 0;\r\n  cases: number = 0;\r\n  casesPerOneMillion: number = 0;\r\n  isNewData: boolean = false;\r\n  public get lethality() {\r\n    return this.deaths && this.cases && (this.deaths / this.cases) * 100;\r\n  }\r\n  toJSON() {\r\n    return { ...this, lethality: this.lethality };\r\n  }\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { NovelCovid } from 'novelcovid';\r\nimport CountryCard from '../components/country-card';\r\nimport PropertiesSorter from '../components/country-properties-sorter';\r\nimport Country from '../models/country';\r\nimport './countries-container.css';\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport CountryFilter from '../components/country-filter';\r\nconst track = new NovelCovid();\r\nexport default function CountriesContainer() {\r\n  const [countries, setCountries] = useState<Country[]>([]);\r\n  const [previousData, setPreviousData] = useState<Country[]>(\r\n    (JSON.parse(localStorage.getItem('countries') || '[]') as Country[]) || []\r\n  );\r\n  const [sortProperty, setSortProperty] = useState<keyof Country>('cases');\r\n\r\n  useEffect(() => {\r\n    // fetch the countries data\r\n    const getCountries = async () => {\r\n      const newData = (((await track.countries()) as unknown[]) as Country[])\r\n        .filter((c) => c.cases > 1000)\r\n        .sort((a, b) => b.cases - a.cases)\r\n        .map((c) => Object.assign(new Country(), c));\r\n\r\n      if (newData.length) {\r\n        try {\r\n          const countriesString = JSON.stringify(newData);\r\n          localStorage.setItem('countries', countriesString);\r\n          setCountries(newData as Country[]);\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      }\r\n    };\r\n\r\n    //WATCH\r\n    getCountries();\r\n  }, []);\r\n\r\n  const handleSort = (property: keyof Country = 'cases') => {\r\n    setSortProperty(property);\r\n    const sortFunction = (a: Country, b: Country): 1 | -1 | 0 => {\r\n      if (b[property] > a[property]) return 1;\r\n      if (b[property] < a[property]) return -1;\r\n      return 0;\r\n    };\r\n    var newCountries = countries.slice().sort(sortFunction);\r\n    var oldCountries = previousData.slice().sort(sortFunction);\r\n    setCountries(newCountries);\r\n    setPreviousData(oldCountries);\r\n  };\r\n  const data = countries || previousData;\r\n  return (\r\n    <>\r\n      <PropertiesSorter onSort={handleSort} />\r\n      {/* <CountryFilter countries={countries.map((c) => c.country || '')} /> */}\r\n      {data?.length === 0 && (\r\n        <div className=\"flex justify-center items-center\">\r\n          <CircularProgress color=\"primary\" size={20} />\r\n          <span className=\"ml-2\">Loading</span>\r\n        </div>\r\n      )}\r\n      <div className=\"grid md:grid-cols-3 gap-4  xl:grid-cols-3\">\r\n        {data?.map((country, id) => (\r\n          <CountryCard\r\n            index={id + 1}\r\n            country={country}\r\n            key={country.country}\r\n            activeProperty={sortProperty}\r\n            previousData={previousData[id]}\r\n          />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nexport default function Navbar() {\r\n  return (\r\n    <nav className=\" p-6 fixed w-screen top-0 bg-white shadow-md uppercase z-10\">\r\n      <div className=\"container mx-auto flex items-center justify-between flex-wrap \">\r\n        <div className=\" flex items-center flex-shrink-0 text-black mr-6\">\r\n          <img src=\"/corona-info/favicon.png\" alt=\"\" className=\"w-8 mr-2\" />\r\n          <span className=\"font-semibold text-2xl tracking-tight \">\r\n            Corona Info\r\n          </span>\r\n        </div>\r\n        {/* <div className=\"block lg:hidden\">\r\n          <button className=\"flex items-center px-3 py-2 border rounded text-black border-gray-400 hover:text-white hover:border-white\">\r\n            <svg\r\n              className=\"fill-current h-3 w-3\"\r\n              viewBox=\"0 0 20 20\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n            >\r\n              <title>Menu</title>\r\n              <path d=\"M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z\" />\r\n            </svg>\r\n          </button>\r\n        </div> */}\r\n        {/* <div className=\"w-full block flex-grow lg:flex lg:items-center lg:w-auto\">\r\n          <div className=\"text-sm lg:flex-grow\">\r\n            <a\r\n              href=\"#responsive-header\"\r\n              className=\"block mt-4 lg:inline-block lg:mt-0 text-gray-600 hover:text-gray-700 mr-4\"\r\n            >\r\n              Countries\r\n            </a>\r\n          </div>\r\n        </div> */}\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport CountriesContainer from './containers/countries-container';\r\nimport Navbar from './components/navbar';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\" \">\r\n      <Navbar />\r\n      <div className=\"container max-w-5xl bg-white mx-auto\">\r\n        <CountriesContainer />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\r\nimport purple from '@material-ui/core/colors/purple';\r\nimport { grey, red } from '@material-ui/core/colors';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: grey,\r\n\r\n    secondary: {\r\n      main: '#f44336',\r\n    },\r\n    success: red,\r\n  },\r\n});\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <MuiThemeProvider theme={theme}>\r\n      <App />\r\n    </MuiThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register({\r\n  onUpdate: (reg) => null,\r\n});\r\n"],"sourceRoot":""}