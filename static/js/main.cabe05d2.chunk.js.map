{"version":3,"sources":["components/card-property.tsx","components/country-card.tsx","components/country-properties-sorter.tsx","components/average-row.tsx","components/countries-table.tsx","components/view-selector.tsx","models/country.ts","services/dataProvider.ts","components/report-linechart.tsx","components/report-barchart.tsx","components/country-statistics.tsx","services/colors.ts","components/countries-comparator-lines.tsx","services/select-options.ts","containers/countries-container.tsx","components/navbar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CardProperty","text","isActive","value","currentValue","previousValue","increasedValue","className","toLocaleString","style","color","fontWeight","Math","floor","undefined","CountryCard","country","activeProperty","previousData","onSelectCountry","onClick","e","backgroundColor","left","ranking","src","countryInfo","flag","alt","isNewData","title","cases","todayCases","deaths","todayDeaths","lethality","casesPerOneMillion","deathsPerOneMillion","tests","testsPerOneMillion","PropertiesSorter","onSort","items","selectedProperty","FormControl","variant","minWidth","InputLabel","id","Select","labelId","onChange","target","label","map","i","MenuItem","key","AverageRow","sortedStyle","average","TableRow","TableCell","align","component","scope","property","CountriesTable","countries","sortProperty","onShowStats","selectedCountries","TableContainer","Paper","Table","size","aria-label","stickyHeader","TableHead","TableBody","Checkbox","name","checked","includes","borderRight","borderLeft","boxShadow","zIndex","getAverageStyle","averageProperty","countryProperty","ratio","ViewSelector","view","onChangeView","cardsViewText","isMobile","tableViewText","Button","height","Apps","FormatListNumbered","Country","recovered","critical","updated","active","population","this","lethalityString","toFixed","Number","getDailyCountriesReport","minCases","a","countriesJson","fetch","json","filter","c","sort","b","Object","assign","forEach","console","log","getHistoricalReport","countriesPopulation","countryJson","timeline","historical","currentCountry","accumulatedCountry","sumProvinces","report","entries","countryName","historicalCountry","mapToCountryReport","newOccurrences","accumulatedOccurrences","keys","k","arr","split","month","day","length","formattedDate","acumulatedCases","acumulatedDeaths","date","round","d","ReportLineChart","scale","width","maxWidth","padding","margin","borderRadius","data","barSize","dataKey","allowDataOverflow","stroke","type","domain","strokeDasharray","dot","r","fill","ReportBarChart","field","slice","reduce","replace","content","toLowerCase","y","isFront","CustomTooltip","payload","CountryStats","open","onClose","Dialog","aria-labelledby","fullWidth","DialogTitle","DialogContent","CircularProgress","DialogActions","autoFocus","colors","CountriesComparatorLines","compareArr","pick","compareObject","countryData","countryOb","mapData","marginLeft","countrySorterOptions","countryCompareOptions","historicalReport","CountriesContainer","useState","setCountries","setSelectedCountries","selectedCountry","setSelectedCountry","sortProperties","setSortProperties","JSON","parse","localStorage","getItem","previousCountries","setPreviousCountries","setSortProperty","setView","filterFlag","setFilterFlag","compareFlag","setCompareFlag","useEffect","newData","countriesString","stringify","setItem","acc","curr","getPopulation","getCountries","handleShowCountryStatistics","dataToRender","getTruncatedAverage","sortByProperty","sortedNewCountries","sortedPreviousCountries","FormControlLabel","control","Switch","disabled","isCompareActive","newSelectedCountries","position","indexOf","splice","push","find","truncatedAverage","truncated","pop","shift","result","Navbar","App","Boolean","window","location","hostname","match","theme","createMuiTheme","palette","primary","grey","secondary","main","success","red","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cabe05d2.chunk.js","sourcesContent":["import React from 'react';\r\nexport default function CardProperty({\r\n  text,\r\n  isActive = false,\r\n  currentValue: value,\r\n  previousValue,\r\n}: {\r\n  text: string;\r\n  isActive?: boolean;\r\n  currentValue: number;\r\n  previousValue?: number;\r\n}) {\r\n  const activeState = 'font-bold';\r\n  const increasedValue = previousValue ? value - previousValue : 0;\r\n  return (\r\n    <div\r\n      className={`flex justify-between items-center relative pl-2 ${\r\n        isActive && activeState\r\n      } rounded-lg`}\r\n    >\r\n      <span>{text}:</span>\r\n\r\n      <div>\r\n        {value?.toLocaleString()}{' '}\r\n        <span style={{ color: '#f44336', fontWeight: 'normal' }}>\r\n          {/* if new data since last visit */}\r\n          {Math.floor(increasedValue) > 0\r\n            ? `(▲ ${Math.floor(increasedValue)})`\r\n            : undefined}\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport CardProperty from './card-property';\r\nimport Country from '../models/country';\r\nimport './country-card.css';\r\ninterface CountryCardProps {\r\n  country: Country;\r\n  previousData?: Country;\r\n  activeProperty: keyof Country;\r\n  onSelectCountry: (country?: Country) => void;\r\n}\r\nexport default function CountryCard({\r\n  country,\r\n  activeProperty,\r\n  previousData,\r\n  onSelectCountry,\r\n}: CountryCardProps) {\r\n  return (\r\n    <div className=\"shadow rounded-md overflow-hidden hover:shadow-md  transition duration-300 ease-in-out \">\r\n      {/* header */}\r\n      <div\r\n        onClick={(e) => onSelectCountry(country)}\r\n        className=\"w-full cursor-pointer flex justify-center items-center p-5 font-bold uppercase text-black text-lg relative\"\r\n        style={{ backgroundColor: 'rgba(0,0,0,.04)' }}\r\n      >\r\n        <span className=\"absolute\" style={{ left: '2rem' }}>\r\n          {country.ranking}.\r\n        </span>\r\n        <img src={country.countryInfo?.flag} alt=\"\" className=\"h-4 mr-2\" />\r\n        <h3>{country.country}</h3>\r\n\r\n        {country.isNewData && (\r\n          <div\r\n            className=\"blob green\"\r\n            title=\"there is new data from the last time you visited the site\"\r\n          ></div>\r\n        )}\r\n      </div>\r\n      {/* body */}\r\n      <div className=\"px-6 py-2\">\r\n        <CardProperty\r\n          text=\"Cases\"\r\n          currentValue={country.cases}\r\n          isActive={activeProperty === 'cases'}\r\n        />\r\n        <CardProperty\r\n          text=\"Today cases\"\r\n          currentValue={country.todayCases}\r\n          previousValue={previousData?.todayCases}\r\n          isActive={activeProperty === 'todayCases'}\r\n        />\r\n        <br className=\"my-3\" />\r\n        <CardProperty\r\n          text=\"Deaths\"\r\n          currentValue={country.deaths}\r\n          isActive={activeProperty === 'deaths'}\r\n        />\r\n        <CardProperty\r\n          text=\"Today deaths\"\r\n          currentValue={country.todayDeaths}\r\n          previousValue={previousData?.todayDeaths}\r\n          isActive={activeProperty === 'todayDeaths'}\r\n        />\r\n        <br className=\"my-3\" />\r\n        <CardProperty\r\n          text=\"Lethality\"\r\n          currentValue={country.lethality}\r\n          isActive={activeProperty === 'lethality'}\r\n        />\r\n        <CardProperty\r\n          text=\"Cases per 1M\"\r\n          currentValue={country.casesPerOneMillion}\r\n          isActive={activeProperty === 'casesPerOneMillion'}\r\n        />\r\n        <CardProperty\r\n          text=\"Deaths per 1M\"\r\n          currentValue={country.deathsPerOneMillion}\r\n          isActive={activeProperty === 'deathsPerOneMillion'}\r\n        />\r\n        <br />\r\n        <CardProperty\r\n          text=\"Tests\"\r\n          currentValue={country.tests}\r\n          isActive={activeProperty === 'tests'}\r\n        />\r\n        <CardProperty\r\n          text=\"Tests per 1M\"\r\n          currentValue={country.testsPerOneMillion}\r\n          isActive={activeProperty === 'testsPerOneMillion'}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport './select.css';\r\nimport { CountryProps } from '../interfaces';\r\nexport interface PropertiesSorterProps {\r\n  onSort: (property?: CountryProps, mode?: 'ASC' | 'DESC') => void;\r\n  items: { text: string; value: string | undefined }[];\r\n  selectedProperty: string;\r\n}\r\n\r\nexport default function PropertiesSorter({\r\n  onSort,\r\n  items,\r\n  selectedProperty,\r\n}: PropertiesSorterProps) {\r\n  return (\r\n    <>\r\n      <FormControl\r\n        variant=\"filled\"\r\n        className=\"border-10 border\"\r\n        style={{ minWidth: 135 }}\r\n      >\r\n        <InputLabel id=\"select-label\">Sort by</InputLabel>\r\n        <Select\r\n          labelId=\"select-label\"\r\n          id=\"select\"\r\n          onChange={(e) => onSort(e.target.value as CountryProps)}\r\n          label=\"Sort by\"\r\n          value={selectedProperty}\r\n        >\r\n          {items.map((i) => {\r\n            const result =\r\n              i.value !== undefined ? (\r\n                <MenuItem key={i.value} value={i.value}>\r\n                  {i.text}\r\n                </MenuItem>\r\n              ) : (\r\n                <br />\r\n              );\r\n\r\n            return result;\r\n          })}\r\n        </Select>\r\n      </FormControl>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { TableRow, TableCell } from '@material-ui/core';\r\nimport { CountryProps } from '../interfaces';\r\nexport function AverageRow({\r\n  sortedStyle,\r\n  average,\r\n}: {\r\n  sortedStyle: string;\r\n  average: {\r\n    [key: string]: number;\r\n  };\r\n}) {\r\n  return (\r\n    <TableRow key=\"average\">\r\n      <TableCell\r\n        align=\"right\"\r\n        className={sortedStyle + ' font-bold'}\r\n      ></TableCell>\r\n\r\n      <TableCell component=\"th\" scope=\"row\" className={sortedStyle}>\r\n        <span className=\"font-bold\">Average*</span>\r\n      </TableCell>\r\n      {([\r\n        'cases',\r\n        'todayCases',\r\n        'deaths',\r\n        'todayDeaths',\r\n        'lethality',\r\n        'casesPerOneMillion',\r\n        'deathsPerOneMillion',\r\n        'tests',\r\n        'testsPerOneMillion',\r\n      ] as CountryProps[]).map((property) => {\r\n        return (\r\n          <TableCell align=\"right\" className={sortedStyle + ' font-bold'}>\r\n            <span className=\"font-bold\">\r\n              {average[property]?.toLocaleString()}\r\n              {property === 'lethality' && '.00%'}\r\n            </span>\r\n          </TableCell>\r\n        );\r\n      })}\r\n    </TableRow>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport {\r\n  Paper,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  Checkbox,\r\n} from '@material-ui/core';\r\nimport Country from '../models/country';\r\nimport { AverageRow } from './average-row';\r\nimport { CountryProps } from '../interfaces';\r\n\r\nimport './countries-table.css';\r\ninterface CountriesTableProps {\r\n  countries: Country[];\r\n  sortProperty: CountryProps;\r\n  onSelectCountry: any;\r\n  onShowStats: any;\r\n  selectedCountries: string[];\r\n  average: { [key: string]: number };\r\n}\r\nexport default function CountriesTable({\r\n  countries,\r\n  sortProperty = 'cases',\r\n  onSelectCountry,\r\n  onShowStats,\r\n  selectedCountries,\r\n  average,\r\n}: CountriesTableProps) {\r\n  const sortedStyle = 'font-bold';\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table size=\"small\" aria-label=\"a dense table\" stickyHeader>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell align=\"center\">\r\n              <span className=\"font-bold\">#</span>\r\n            </TableCell>\r\n            <TableCell>Country</TableCell>\r\n            <TableCell align=\"center\">Cases</TableCell>\r\n            <TableCell align=\"center\">Today cases</TableCell>\r\n            <TableCell align=\"center\">Deaths</TableCell>\r\n            <TableCell align=\"center\">Today deaths</TableCell>\r\n            <TableCell align=\"center\">Lethality</TableCell>\r\n            <TableCell align=\"center\">Cases per 1M</TableCell>\r\n            <TableCell align=\"center\">Deaths per 1M</TableCell>\r\n            <TableCell align=\"center\">Tests</TableCell>\r\n            <TableCell align=\"center\">Tests per 1M</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {/***Average row***/}\r\n          <AverageRow sortedStyle={sortedStyle} average={average} />\r\n\r\n          {countries.map((country, i) => {\r\n            return (\r\n              <TableRow key={country.country}>\r\n                <TableCell align=\"right\">\r\n                  <span className=\"flex items-center justify-end\">\r\n                    <span className=\"font-bold\">{country.ranking}</span>\r\n                    <Checkbox\r\n                      name={country.country}\r\n                      onChange={(e) => onSelectCountry(e.target.name)}\r\n                      size=\"small\"\r\n                      checked={selectedCountries.includes(\r\n                        country.country || ''\r\n                      )}\r\n                    />\r\n                  </span>\r\n                </TableCell>\r\n\r\n                <TableCell\r\n                  className=\"cursor-pointer\"\r\n                  component=\"th\"\r\n                  scope=\"row\"\r\n                  onClick={() => onShowStats(country)}\r\n                >\r\n                  <span className=\"flex items-center\">\r\n                    <img\r\n                      className=\"w-4 mr-2\"\r\n                      src={`${country.countryInfo?.flag}`}\r\n                      alt=\"\"\r\n                    />\r\n                    <span>{country.country}</span>\r\n                  </span>\r\n                </TableCell>\r\n                {([\r\n                  'cases',\r\n                  'todayCases',\r\n                  'deaths',\r\n                  'todayDeaths',\r\n                  'lethality',\r\n                  'casesPerOneMillion',\r\n                  'deathsPerOneMillion',\r\n                  'tests',\r\n                  'testsPerOneMillion',\r\n                ] as CountryProps[]).map((property) => {\r\n                  let value =\r\n                    country[property] !== 0\r\n                      ? country[property]?.toLocaleString() || '--'\r\n                      : ' --';\r\n                  if (property === 'lethality') value += '%';\r\n\r\n                  return (\r\n                    <TableCell\r\n                      key={property}\r\n                      style={\r\n                        sortProperty === property\r\n                          ? {\r\n                              fontWeight: 'bold',\r\n                              borderRight: '1px solid rgba(0,0,0,.3)',\r\n                              borderLeft: '1px solid rgba(0,0,0,.3)',\r\n                              boxShadow: '0 0 5px rgba(0,0,0,.1)',\r\n                              zIndex: 11,\r\n                            }\r\n                          : undefined\r\n                      }\r\n                      className={`${getAverageStyle(\r\n                        country,\r\n                        property,\r\n                        average\r\n                      )}`}\r\n                      align=\"right\"\r\n                    >\r\n                      {value}\r\n                    </TableCell>\r\n                  );\r\n                })}\r\n              </TableRow>\r\n            );\r\n          })}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n\r\nconst getAverageStyle = (\r\n  country: Country,\r\n  property: CountryProps,\r\n  average: { [key: string]: number }\r\n) => {\r\n  const averageProperty = average[property];\r\n  const countryProperty = country[property];\r\n  const ratio = averageProperty / countryProperty;\r\n\r\n  if (countryProperty === 0) return 'bg-white';\r\n\r\n  if (property === 'tests' || property === 'testsPerOneMillion') {\r\n    if (ratio < 0.1) return 'bg-green-300';\r\n    if (ratio < 0.2) return 'bg-green-200';\r\n    if (ratio < 0.3) return 'bg-green-100';\r\n\r\n    if (averageProperty > countryProperty * 8) return 'bg-red-300';\r\n    if (averageProperty > countryProperty * 6) return 'bg-red-200';\r\n    if (averageProperty > countryProperty * 4) return 'bg-red-100';\r\n\r\n    return 'bg-white';\r\n  }\r\n\r\n  if (property === 'lethality') {\r\n    if (averageProperty > countryProperty * 6) return 'bg-green-300';\r\n    if (averageProperty > countryProperty * 4) return 'bg-green-200';\r\n    if (averageProperty > countryProperty * 2) return 'bg-green-100';\r\n\r\n    if (countryProperty > averageProperty * 3) return 'bg-red-300';\r\n    if (countryProperty > averageProperty * 2.5) return 'bg-red-200';\r\n    if (countryProperty > averageProperty * 2) return 'bg-red-100';\r\n\r\n    return 'bg-white';\r\n  }\r\n\r\n  if (ratio < 0.1) return 'bg-red-300';\r\n  if (ratio < 0.2) return 'bg-red-200';\r\n  if (ratio < 0.3) return 'bg-red-100';\r\n\r\n  if (averageProperty > countryProperty * 8) return 'bg-green-300';\r\n  if (averageProperty > countryProperty * 7) return 'bg-green-200';\r\n  if (averageProperty > countryProperty * 5) return 'bg-green-100';\r\n\r\n  return 'bg-white';\r\n};\r\n","import React from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport { Apps, FormatListNumbered } from '@material-ui/icons';\r\nimport isMobile from 'is-mobile';\r\n\r\ninterface ViewSelectorProps {\r\n  view: 'cards' | 'table';\r\n  onChangeView: (view: 'cards' | 'table') => void;\r\n}\r\nexport default function ViewSelector({\r\n  view,\r\n  onChangeView,\r\n}: ViewSelectorProps) {\r\n  const cardsViewText = isMobile() ? 'Cards' : 'Cards View';\r\n  const tableViewText = isMobile() ? 'Table' : 'Table View';\r\n  return (\r\n    <div className=\"ml-3 flex items-center\">\r\n      <Button\r\n        style={{ height: '100%' }}\r\n        onClick={() => {\r\n          const nextView = view === 'cards' ? 'table' : 'cards';\r\n          return onChangeView(nextView);\r\n        }}\r\n        variant=\"contained\"\r\n      >\r\n        {view !== 'cards' ? <Apps /> : <FormatListNumbered />}\r\n        <span className=\"ml-3 normal-case\">\r\n          {view !== 'cards' ? cardsViewText : tableViewText}\r\n        </span>\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","export default class Country {\r\n  country: string = '';\r\n  countryInfo:\r\n    | {\r\n        _id: number | null;\r\n        latitude: number;\r\n        longitude: number;\r\n        flag: string;\r\n        iso3: string | null;\r\n        iso2: string | null;\r\n      }\r\n    | undefined;\r\n  todayCases: number = 0;\r\n  deaths: number = 0;\r\n  todayDeaths: number = 0;\r\n  recovered: number = 0;\r\n  critical: number = 0;\r\n  deathsPerOneMillion: number = 0;\r\n  updated: number = 0;\r\n  tests: number = 0;\r\n  testsPerOneMillion: number = 0;\r\n  active: number = 0;\r\n  cases: number = 0;\r\n  casesPerOneMillion: number = 0;\r\n  isNewData: boolean = false;\r\n  ranking: number = 0;\r\n  population: number = 0;\r\n  public get lethality() {\r\n    const lethalityString = (\r\n      this.deaths &&\r\n      this.cases &&\r\n      (this.deaths / this.cases) * 100\r\n    ).toFixed(2);\r\n\r\n    const result = Number(lethalityString);\r\n    return result;\r\n  }\r\n\r\n  public get getPopulation() {\r\n    return this.cases / this.casesPerOneMillion;\r\n  }\r\n  toJSON() {\r\n    return { ...this, lethality: this.lethality };\r\n  }\r\n}\r\n","import Country from '../models/country';\r\nimport {\r\n  CountryProps,\r\n  HistoricalCountry,\r\n  CountryDailyReport,\r\n} from '../interfaces';\r\n\r\n//__ INITIAL CURRENT COUNTRIES DATA\r\nexport async function getDailyCountriesReport(\r\n  minCases: number,\r\n  sortProperty: CountryProps\r\n) {\r\n  const countriesUrl = 'https://corona.lmao.ninja/v2/countries';\r\n  let countriesJson: Country[] = [];\r\n\r\n  try {\r\n    countriesJson = await (await fetch(countriesUrl)).json();\r\n    const countries = countriesJson\r\n      .filter((c) => c.cases > minCases)\r\n      .sort((a, b) => b[sortProperty] - a[sortProperty])\r\n      .map((c) => {\r\n        return Object.assign(new Country(), c);\r\n      });\r\n\r\n    countries.forEach((c, i) => (c.ranking = i + 1));\r\n\r\n    return countries;\r\n  } catch (error) {\r\n    console.log(error);\r\n    return [];\r\n  }\r\n}\r\n\r\n//__ HISTORICAL COUNTRIES DATA\r\nexport async function getHistoricalReport(countriesPopulation: {\r\n  [country: string]: number;\r\n}): Promise<{\r\n  [key: string]: CountryDailyReport[];\r\n}> {\r\n  const countryUrl = `https://corona.lmao.ninja/v2/historical/?lastdays=95`;\r\n\r\n  const countryJson = (await (\r\n    await fetch(countryUrl)\r\n  ).json()) as HistoricalCountry[];\r\n  countryJson.map((c) => c.timeline);\r\n\r\n  const historical: { [key: string]: HistoricalCountry } = {};\r\n\r\n  countryJson.forEach((currentCountry) => {\r\n    const accumulatedCountry = historical[currentCountry.country];\r\n    if (accumulatedCountry) {\r\n      sumProvinces(currentCountry, accumulatedCountry, 'cases');\r\n      sumProvinces(currentCountry, accumulatedCountry, 'deaths');\r\n    } else {\r\n      historical[currentCountry.country] = currentCountry;\r\n    }\r\n  });\r\n  let report: { [key: string]: CountryDailyReport[] } = {};\r\n\r\n  Object.entries(historical).forEach(([countryName, historicalCountry]) => {\r\n    historicalCountry['population'] = countriesPopulation[countryName];\r\n    report[countryName] = mapToCountryReport(historicalCountry);\r\n  });\r\n\r\n  return report;\r\n}\r\n\r\n//__UTIL METHODS TO MAP DATA\r\n\r\n//sum all provinces into one country\r\n//mutates accumulatedCountry\r\nfunction sumProvinces(\r\n  currentCountry: HistoricalCountry,\r\n  accumulatedCountry: HistoricalCountry,\r\n  property: 'deaths' | 'cases'\r\n) {\r\n  let newOccurrences = currentCountry.timeline[property];\r\n  let accumulatedOccurrences = accumulatedCountry.timeline[property];\r\n  Object.entries(newOccurrences).forEach(([key, value]) => {\r\n    if (accumulatedOccurrences[key]) {\r\n      accumulatedOccurrences[key] += value;\r\n    } else {\r\n      if (value !== 0) {\r\n        accumulatedOccurrences[key] = value;\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n//maps\r\nfunction mapToCountryReport(country: HistoricalCountry): CountryDailyReport[] {\r\n  const timeline = country.timeline;\r\n  const cases = timeline.cases as {\r\n    [key: string]: number;\r\n  };\r\n  const deaths = timeline.deaths as {\r\n    [key: string]: number;\r\n  };\r\n  const days = Object.keys(timeline.cases)\r\n    .map((k, i, arr) => {\r\n      let [month, day] = k.split('/');\r\n      if (month.length === 1) month = '0' + month;\r\n      if (day.length === 1) day = '0' + day;\r\n      const formattedDate = month + '-' + day;\r\n      const acumulatedCases: number = cases[k];\r\n      const acumulatedDeaths = deaths[k];\r\n\r\n      //calculate today values, infering from previous\r\n      let todayCases =\r\n        i === 0 ? acumulatedCases : acumulatedCases - cases[arr[i - 1]];\r\n      let todayDeaths =\r\n        i === 0 ? acumulatedDeaths : acumulatedDeaths - deaths[arr[i - 1]];\r\n      //calculate per one million\r\n      const casesPerOneMillion = acumulatedCases\r\n        ? Math.round(acumulatedCases / country.population)\r\n        : 0;\r\n      const deathsPerOneMillion = acumulatedDeaths\r\n        ? Math.round(acumulatedDeaths / country.population)\r\n        : 0;\r\n      return {\r\n        date: formattedDate,\r\n        cases: acumulatedCases,\r\n        casesPerOneMillion,\r\n        todayCases,\r\n        deaths: acumulatedDeaths,\r\n        deathsPerOneMillion,\r\n        todayDeaths,\r\n      };\r\n    })\r\n    .filter((d) => d.cases !== 0);\r\n\r\n  return days;\r\n}\r\n\r\n//given a month number, returns abbreviation for this month\r\nconst getMonthAbb = (x: number) => {\r\n  const months = [\r\n    'Jan',\r\n    'Feb',\r\n    'Mar',\r\n    'Apr',\r\n    'May',\r\n    'Jun',\r\n    'Jul',\r\n    'Aug',\r\n    'Sep',\r\n    'Oct',\r\n    'Nov',\r\n    'Dec',\r\n  ];\r\n  const monthNumber = x - 1;\r\n  return months[monthNumber];\r\n};\r\n","import React from 'react';\r\nimport {\r\n  LineChart,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Legend,\r\n  Line,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n} from 'recharts';\r\nimport { colors } from '../services/colors';\r\n\r\ninterface ReportProps {\r\n  report: { date: string; cases: number; deaths: number }[];\r\n  scale: 'log' | 'linear';\r\n}\r\n\r\nconst deathsColor = '#F44336';\r\nconst casesColor = 'rgb(0, 136, 254)';\r\nexport default function ReportLineChart({ report, scale }: ReportProps) {\r\n  return (\r\n    <div className=\"mb-4\">\r\n      <h3 className=\"bg-gray-100 p-2 mb-2 font-bold\">\r\n        Evolution of cases and deaths since {report[0].date}{' '}\r\n        <span className=\"bg-yellow-400 px-2 font-normal rounded-lg\">\r\n          {scale} scale\r\n        </span>\r\n      </h3>\r\n      <div\r\n        style={{\r\n          width: '100%',\r\n          height: 200,\r\n          maxWidth: 500,\r\n          padding: '10px 10px 0',\r\n          color: 'white',\r\n          margin: '0 auto',\r\n          backgroundColor: 'rgba(0,0,0,.9)',\r\n          borderRadius: 10,\r\n        }}\r\n      >\r\n        <ResponsiveContainer>\r\n          <LineChart data={report} barSize=\"big\">\r\n            <XAxis\r\n              dataKey={'date'}\r\n              allowDataOverflow={true}\r\n              stroke=\"darkgray\"\r\n              type=\"category\"\r\n            />\r\n            <YAxis\r\n              dataKey=\"cases\"\r\n              scale={scale}\r\n              domain={[1, 'auto']}\r\n              stroke=\"darkgray\"\r\n            />\r\n            <CartesianGrid strokeDasharray=\"1 1\" />\r\n            <Tooltip />\r\n            <Legend />\r\n            <Line\r\n              type=\"monotone\"\r\n              dataKey=\"cases\"\r\n              stroke={'rgba(0, 136, 254, 0.82)'}\r\n              dot={{ r: 3, fill: casesColor }}\r\n            />{' '}\r\n            <Line\r\n              type=\"linear\"\r\n              dataKey=\"deaths\"\r\n              stroke={'red'}\r\n              dot={{ r: 3, fill: deathsColor }}\r\n            />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport {\r\n  XAxis,\r\n  YAxis,\r\n  Bar,\r\n  BarChart,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n  Legend,\r\n  ReferenceLine,\r\n} from 'recharts';\r\ninterface ReportBarchartProps {\r\n  report: {\r\n    date: string;\r\n    cases: number;\r\n    deaths: number;\r\n    todayCases: number;\r\n    todayDeaths: number;\r\n  }[];\r\n  field: 'todayCases' | 'todayDeaths';\r\n}\r\nconst deathsColor = '#F44336';\r\nconst casesColor = 'rgb(0, 136, 254)';\r\nexport default function ReportBarChart({ report, field }: ReportBarchartProps) {\r\n  const data = report.slice(-30);\r\n  const average =\r\n    data.map((a) => a[field]).reduce((a, b) => a + b) / data.length;\r\n  return (\r\n    <div className=\"mb-4\">\r\n      <h3 className=\"bg-gray-100 p-2 mb-2 font-bold\">\r\n        {field.replace('today', '')} per day in the last month{' '}\r\n        <span\r\n          className={`font-normal px-1 rounded ${\r\n            field === 'todayDeaths' && average > 300\r\n              ? average > 600\r\n                ? 'bg-red-800 text-white'\r\n                : 'bg-red-500 text-white'\r\n              : 'bg-gray-300'\r\n          }`}\r\n        >\r\n          average {Math.round(average)}\r\n        </span>\r\n      </h3>\r\n      <div\r\n        style={{\r\n          width: '100%',\r\n          height: 200,\r\n          maxWidth: 500,\r\n          padding: 10,\r\n          color: 'white',\r\n          margin: '0 auto',\r\n          backgroundColor: 'rgba(0,0,0,.9)',\r\n          borderRadius: 10,\r\n        }}\r\n      >\r\n        <ResponsiveContainer>\r\n          <BarChart data={data} height={200} width={500}>\r\n            <Tooltip content={<CustomTooltip />} />\r\n            <Legend />\r\n            <XAxis dataKey=\"date\" stroke=\"darkgray\" />\r\n            <YAxis dataKey={field} stroke=\"darkgray\" />\r\n\r\n            <Bar\r\n              name={field.replace('today', '').toLowerCase()}\r\n              dataKey={field}\r\n              fill={field === 'todayCases' ? casesColor : deathsColor}\r\n            />\r\n            <ReferenceLine\r\n              y={average}\r\n              stroke=\"yellow\"\r\n              strokeDasharray=\"3 3\"\r\n              isFront={true}\r\n            />\r\n          </BarChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nconst CustomTooltip = ({ active, payload, label }: any) => {\r\n  if (active) {\r\n    return (\r\n      <div className=\"bg-white text-black border-gray-100 p-2 border border-solid\">\r\n        <p>{label}</p>\r\n\r\n        <p className=\"label\">{`${payload[0].name}: ${payload[0].value}`}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n","import React from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  CircularProgress,\r\n} from '@material-ui/core';\r\nimport Country from '../models/country';\r\nimport ReportLineChart from './report-linechart';\r\nimport ReportBarChart from './report-barchart';\r\nimport './countries-statistics.css';\r\nimport { CountryDailyReport } from '../interfaces';\r\nexport interface CountryStatsProps {\r\n  country: Country;\r\n  open: boolean;\r\n  onClose: any;\r\n  report: CountryDailyReport[];\r\n}\r\nexport default function CountryStats({\r\n  country,\r\n  open,\r\n  onClose,\r\n  report,\r\n}: CountryStatsProps) {\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={open}\r\n        aria-labelledby=\"responsive-dialog-title\"\r\n        onClose={onClose}\r\n        fullWidth={true}\r\n        maxWidth=\"sm\"\r\n      >\r\n        <DialogTitle\r\n          id=\"responsive-dialog-title\"\r\n          className=\"bg-gray-200 mb-4  flex justify-center\"\r\n        >\r\n          <div className=\"flex items-center\">\r\n            <img\r\n              className=\"w-4 h-4 rounded-full mr-4\"\r\n              src={`${country.countryInfo?.flag}`}\r\n              alt=\"\"\r\n            />\r\n            <span className=\"font-bold\">{country.country}</span>\r\n          </div>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          {report.length ? (\r\n            <>\r\n              <ReportLineChart report={report} scale=\"log\" />\r\n\r\n              <ReportLineChart report={report} scale=\"linear\" />\r\n              <ReportBarChart report={report} field=\"todayCases\" />\r\n              <ReportBarChart report={report} field=\"todayDeaths\" />\r\n            </>\r\n          ) : (\r\n            <span>\r\n              <CircularProgress color=\"primary\" size={20} /> Loading country\r\n              data\r\n            </span>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus color=\"primary\" onClick={onClose}>\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","export const colors = [\r\n  '#004d40',\r\n  '#bf360c',\r\n  '#0d47a1',\r\n  '#880e4f',\r\n  '#3e2723',\r\n  '#33691e',\r\n  '#6200ea',\r\n  '#ef5350',\r\n  '#bf360c',\r\n  '#ffa000',\r\n  '#9e9e9e',\r\n  '#00c853',\r\n  '#263238',\r\n  '#5e35b1',\r\n  '#e91e63',\r\n  '#f9a825',\r\n  '#00bfa5',\r\n];\r\n","import React from 'react';\r\nimport pick from 'lodash.pick';\r\nimport { CountryDailyReport } from '../interfaces';\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  Tooltip,\r\n  Legend,\r\n  YAxis,\r\n  ResponsiveContainer,\r\n  CartesianAxis,\r\n  CartesianGrid,\r\n} from 'recharts';\r\nimport { colors } from '../services/colors';\r\n\r\ninterface CountriesComparatorLinesProps {\r\n  report: { [contry: string]: CountryDailyReport[] };\r\n  selectedCountries?: string[];\r\n  property: string;\r\n}\r\n\r\nexport default function CountriesComparatorLines({\r\n  report,\r\n  selectedCountries,\r\n  property,\r\n}: CountriesComparatorLinesProps) {\r\n  const compareArr = mapData(report, property, selectedCountries);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"font-bold p-5\">\r\n        Comparing{' '}\r\n        <span style={{ color: '#FF5722' }}>\r\n          {property.replace(/([a-z])([A-Z])/g, '$1 $2').toLowerCase()}\r\n        </span>\r\n        {selectedCountries?.map((c, i) => {\r\n          return (\r\n            <span\r\n              style={{\r\n                marginLeft: 10,\r\n                padding: '1px 10px',\r\n                borderRadius: '2em',\r\n                backgroundColor: colors[i],\r\n                color: 'white',\r\n              }}\r\n            >\r\n              {c}\r\n            </span>\r\n          );\r\n        })}\r\n      </h3>\r\n      <br />\r\n      <div style={{ width: '100%', height: '50vh' }}>\r\n        <ResponsiveContainer>\r\n          <LineChart data={compareArr}>\r\n            {selectedCountries?.map((c, i) => {\r\n              return <Line dataKey={c} key={c} stroke={colors[i]} />;\r\n            })}\r\n            <XAxis dataKey=\"date\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Legend />\r\n            <CartesianGrid strokeDasharray=\"1 1\" />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction mapData(\r\n  report: { [contry: string]: CountryDailyReport[] },\r\n  property: string,\r\n  selectedCountries?: string[]\r\n) {\r\n  //just the selected countries reports\r\n  if (selectedCountries?.length) {\r\n    report = pick(report, [...selectedCountries, 'date']);\r\n  }\r\n\r\n  let compareObject: any = {};\r\n\r\n  //group all countries by date\r\n  Object.entries(report).map(([country, report]) => {\r\n    {\r\n      report.forEach((r) => {\r\n        const countryData: any = r[property as keyof CountryDailyReport];\r\n        const date = r['date'];\r\n        compareObject[date] = {\r\n          ...compareObject[date],\r\n          [country]: countryData,\r\n        };\r\n      });\r\n    }\r\n  });\r\n\r\n  //delete empty entries\r\n  Object.entries(compareObject).forEach(([date, countryOb]) => {\r\n    Object.entries(countryOb as any).forEach(([key, value]) => {\r\n      if (value === 0) {\r\n        delete compareObject[date][key];\r\n      }\r\n      if (Object.keys(compareObject[date]).length === 0) {\r\n        delete compareObject[date];\r\n      }\r\n    });\r\n  });\r\n\r\n  //map the object to an array\r\n  let compareArr = Object.entries(compareObject)\r\n    .map(([date, value]) => {\r\n      return {\r\n        date,\r\n        ...(value as {}),\r\n      };\r\n    })\r\n    .sort((a, b) => (a.date > b.date ? 1 : -1));\r\n\r\n  return compareArr;\r\n}\r\n","import { CountryProps } from '../interfaces';\r\n\r\nexport const countrySorterOptions: {\r\n  text: string;\r\n  value: CountryProps | undefined;\r\n}[] = [\r\n  { text: 'cases', value: 'cases' },\r\n  { text: 'today cases', value: 'todayCases' },\r\n  { text: 'deaths', value: 'deaths' },\r\n  { text: 'today deaths', value: 'todayDeaths' },\r\n  { text: '', value: undefined },\r\n  { text: 'lethality', value: 'lethality' },\r\n  { text: 'cases per 1M', value: 'casesPerOneMillion' },\r\n  { text: 'deaths per 1M', value: 'deathsPerOneMillion' },\r\n  { text: '', value: undefined },\r\n  { text: 'tests', value: 'tests' },\r\n  { text: 'tests per 1M', value: 'testsPerOneMillion' },\r\n];\r\n\r\nexport const countryCompareOptions: {\r\n  text: string;\r\n  value: CountryProps | undefined;\r\n}[] = [\r\n  { text: 'cases', value: 'cases' },\r\n  { text: 'deaths', value: 'deaths' },\r\n  { text: 'cases per 1M', value: 'casesPerOneMillion' },\r\n  { text: 'deaths per 1M', value: 'deathsPerOneMillion' },\r\n];\r\n","import React, { useState, useEffect } from 'react';\r\nimport CountryCard from '../components/country-card';\r\nimport PropertiesSorter, {\r\n  PropertiesSorterProps,\r\n} from '../components/country-properties-sorter';\r\nimport Country from '../models/country';\r\nimport './countries-container.css';\r\nimport { CircularProgress, FormControlLabel, Switch } from '@material-ui/core';\r\nimport CountriesTable from '../components/countries-table';\r\nimport ViewSelector from '../components/view-selector';\r\nimport { CountryProps, CountryDailyReport } from '../interfaces';\r\nimport {\r\n  getDailyCountriesReport,\r\n  getHistoricalReport,\r\n} from '../services/dataProvider';\r\nimport CountryStats from '../components/country-statistics';\r\nimport isMobile from 'is-mobile';\r\nimport CountriesComparatorLines from '../components/countries-comparator-lines';\r\nimport {\r\n  countrySorterOptions,\r\n  countryCompareOptions,\r\n} from '../services/select-options';\r\n\r\n//module variable\r\nlet historicalReport: { [key: string]: CountryDailyReport[] } = {};\r\nexport default function CountriesContainer() {\r\n  //__STATE HOOKS\r\n\r\n  const [countries, setCountries] = useState<Country[]>([]);\r\n  const [selectedCountries, setSelectedCountries] = useState<string[]>([]);\r\n  const [selectedCountry, setSelectedCountry] = useState<Country>();\r\n\r\n  const [sortProperties, setSortProperties] = useState(countrySorterOptions);\r\n\r\n  //hook initialized with last access to page data is\r\n  const [previousCountries, setPreviousCountries] = useState<Country[]>(\r\n    (JSON.parse(localStorage.getItem('countries') || '[]') as Country[]) || []\r\n  );\r\n  const [sortProperty, setSortProperty] = useState<string>('cases');\r\n  const [view, setView] = useState<'cards' | 'table'>(\r\n    isMobile() ? 'cards' : 'table'\r\n  );\r\n  const [filterFlag, setFilterFlag] = useState<boolean>(false);\r\n  const [compareFlag, setCompareFlag] = useState<boolean>(false);\r\n\r\n  //__EFFECT HOOK | FETCH THE DATA\r\n  useEffect(() => {\r\n    const getCountries = async () => {\r\n      try {\r\n        const newData = await getDailyCountriesReport(1000, 'cases');\r\n\r\n        //if no error, store  in local storage\r\n\r\n        const countriesString = JSON.stringify(newData);\r\n\r\n        //countries field in local storage\r\n        localStorage.setItem('countries', countriesString);\r\n\r\n        //set state of countries\r\n        setCountries(newData as Country[]);\r\n\r\n        //save the historical; does not trigger render\r\n        const countriesPopulation = newData.reduce((acc, curr) => {\r\n          acc[curr.country] = curr.getPopulation;\r\n          return acc;\r\n        }, {} as any);\r\n        historicalReport = await getHistoricalReport(countriesPopulation);\r\n      } catch (error) {\r\n        setCountries(previousCountries);\r\n        console.log(error);\r\n      }\r\n    };\r\n\r\n    //fetch countries data\r\n    getCountries();\r\n  }, []);\r\n\r\n  //__ SORT\r\n  const handleSort = (property: CountryProps = 'cases') => {\r\n    // sorts by descendig by field\r\n    const sortByProperty = (a: Country, b: Country): 1 | -1 | 0 => {\r\n      if (b[property]! > a[property]!) return 1;\r\n      if (b[property]! < a[property]!) return -1;\r\n      return 0;\r\n    };\r\n\r\n    var sortedNewCountries = countries.slice().sort(sortByProperty);\r\n    //ranking according the property ascending\r\n    sortedNewCountries.forEach((c, i) => (c.ranking = i + 1));\r\n\r\n    var sortedPreviousCountries = previousCountries\r\n      .slice()\r\n      .sort(sortByProperty);\r\n\r\n    //store state\r\n    setSortProperty(property);\r\n    setCountries(sortedNewCountries);\r\n    setPreviousCountries(sortedPreviousCountries);\r\n  };\r\n\r\n  //__ VIEW TYPE: cards | table\r\n  const handleChangeView = (view: 'cards' | 'table') => {\r\n    setView(view);\r\n  };\r\n\r\n  //__ ADD COUNTRY TO THE LIST OF SELECTED COUNTRIES\r\n  const handleSelectCountry = (countryName: string) => {\r\n    let newSelectedCountries = selectedCountries.slice();\r\n    const position = newSelectedCountries.indexOf(countryName);\r\n    if (position !== -1) {\r\n      newSelectedCountries.splice(position, 1);\r\n    } else {\r\n      newSelectedCountries.push(countryName);\r\n    }\r\n    if (newSelectedCountries.length === 0) {\r\n      setFilterFlag(false);\r\n    }\r\n    setSelectedCountries(newSelectedCountries);\r\n  };\r\n\r\n  //__ SELECT A COUNTRY\r\n  const handleShowCountryStatistics = (country?: Country) => {\r\n    setSelectedCountry(country);\r\n  };\r\n\r\n  //__ UNSELECT THE COUNTRY\r\n  const handleCloseCountryStats = () => {\r\n    setSelectedCountry(undefined);\r\n  };\r\n\r\n  //__ SWITCH ON THE FILTER\r\n  const toggleFilterFlag = (e: any, filter: boolean) => {\r\n    setFilterFlag(filter);\r\n  };\r\n  const handleCompareChange = (isCompareActive: boolean) => {\r\n    setCompareFlag(isCompareActive);\r\n    setSortProperty('deathsPerOneMillion');\r\n    isCompareActive\r\n      ? setSortProperties(countryCompareOptions)\r\n      : setSortProperties(countrySorterOptions);\r\n  };\r\n\r\n  //data is going to be displayed; filtered or not\r\n  let dataToRender = countries || previousCountries;\r\n  const average = getTruncatedAverage(dataToRender);\r\n\r\n  //filtered data\r\n  if (filterFlag) {\r\n    dataToRender = dataToRender.filter((country) =>\r\n      selectedCountries.includes(country.country || '')\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"flex mb-2   p-2 flex-wrap controls-menu\"\r\n        style={{ backgroundColor: 'rgba(0, 0, 0, 0.04)' }}\r\n      >\r\n        <PropertiesSorter\r\n          onSort={handleSort}\r\n          items={sortProperties}\r\n          selectedProperty={sortProperty}\r\n        />\r\n        <ViewSelector view={view} onChangeView={handleChangeView} />\r\n\r\n        {/*//__SWITCH TO ACTIVATE THE  FILTER */}\r\n        <span className=\"ml-4 flex\">\r\n          <FormControlLabel\r\n            control={\r\n              <Switch\r\n                name=\"checkedA\"\r\n                size=\"small\"\r\n                checked={filterFlag}\r\n                onChange={toggleFilterFlag}\r\n                disabled={selectedCountries.length === 0}\r\n              />\r\n            }\r\n            label=\"Filter\"\r\n          />\r\n        </span>\r\n\r\n        {/*//__SWITCH TO ACTIVATE THE  FILTER */}\r\n        <span className=\"ml-4 flex\">\r\n          <FormControlLabel\r\n            control={\r\n              <Switch\r\n                size=\"small\"\r\n                checked={compareFlag}\r\n                onChange={(e, value) => handleCompareChange(value)}\r\n                disabled={selectedCountries.length === 0}\r\n              />\r\n            }\r\n            label=\"Compare\"\r\n          />\r\n        </span>\r\n      </div>\r\n\r\n      {/*//__ MODAL WITH COUNTRY STATS */}\r\n      {selectedCountry && (\r\n        <CountryStats\r\n          country={selectedCountry}\r\n          open={selectedCountry !== undefined}\r\n          onClose={handleCloseCountryStats}\r\n          report={historicalReport[selectedCountry.country]}\r\n        />\r\n      )}\r\n      {/*//__ SPINNER */}\r\n      {dataToRender?.length === 0 && (\r\n        <div className=\"flex justify-center items-center\">\r\n          <CircularProgress color=\"primary\" size={20} />\r\n          <span className=\"ml-2\">Loading</span>\r\n        </div>\r\n      )}\r\n\r\n      {/*//__ COMPARATOR */}\r\n      {compareFlag && selectedCountries.length > 0 && (\r\n        <CountriesComparatorLines\r\n          property={sortProperty}\r\n          report={historicalReport}\r\n          selectedCountries={selectedCountries}\r\n        />\r\n      )}\r\n      {/*//__ COUNTRIES  RENDERED */}\r\n      {!compareFlag && view === 'cards' ? (\r\n        <div className=\"grid md:grid-cols-3 gap-4  xl:grid-cols-3\">\r\n          {dataToRender?.map((country) => (\r\n            <CountryCard\r\n              onSelectCountry={handleShowCountryStatistics}\r\n              country={country}\r\n              key={country.country}\r\n              activeProperty={sortProperty as CountryProps}\r\n              previousData={previousCountries.find(\r\n                (c) => c.country === country.country\r\n              )}\r\n            />\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        !compareFlag &&\r\n        dataToRender.length !== 0 && (\r\n          <CountriesTable\r\n            onShowStats={handleShowCountryStatistics}\r\n            average={average}\r\n            onSelectCountry={handleSelectCountry}\r\n            countries={dataToRender}\r\n            sortProperty={sortProperty as CountryProps}\r\n            selectedCountries={selectedCountries}\r\n          />\r\n        )\r\n      )}\r\n    </>\r\n  );\r\n}\r\nconst getTruncatedAverage = (countries: Country[]) => {\r\n  const properties: CountryProps[] = [\r\n    'cases',\r\n    'todayCases',\r\n    'deaths',\r\n    'todayDeaths',\r\n    'lethality',\r\n    'casesPerOneMillion',\r\n    'deathsPerOneMillion',\r\n    'tests',\r\n    'testsPerOneMillion',\r\n  ];\r\n  let truncatedAverage: { [key: string]: number } = {};\r\n\r\n  properties.forEach((property) => {\r\n    const truncated = countries.map((c: any) => c[property] as number).sort();\r\n    if (countries.length > 10) {\r\n      truncated.pop();\r\n      truncated.pop();\r\n      truncated.shift();\r\n      truncated.shift();\r\n    }\r\n\r\n    const sum = truncated.reduce((a, b) => a + b, 0);\r\n    const average = sum / countries.length;\r\n    const result = Math.round(average);\r\n    truncatedAverage[property] = result;\r\n  });\r\n\r\n  return truncatedAverage;\r\n};\r\n","import React from 'react';\r\nexport default function Navbar() {\r\n  return (\r\n    <nav className=\" p-6 mb-3 w-screen top-0 bg-white shadow-md uppercase z-10\">\r\n      <div className=\"container mx-auto flex items-center justify-between flex-wrap \">\r\n        <div className=\" flex items-center flex-shrink-0 text-black mr-6\">\r\n          <img src=\"/corona-info/favicon.png\" alt=\"\" className=\"w-8 mr-2\" />\r\n          <span className=\"font-semibold text-2xl tracking-tight \">\r\n            Corona Info\r\n          </span>\r\n        </div>\r\n        {/* <div className=\"block lg:hidden\">\r\n          <button className=\"flex items-center px-3 py-2 border rounded text-black border-gray-400 hover:text-white hover:border-white\">\r\n            <svg\r\n              className=\"fill-current h-3 w-3\"\r\n              viewBox=\"0 0 20 20\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n            >\r\n              <title>Menu</title>\r\n              <path d=\"M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z\" />\r\n            </svg>\r\n          </button>\r\n        </div> */}\r\n        {/* <div className=\"w-full block flex-grow lg:flex lg:items-center lg:w-auto\">\r\n          <div className=\"text-sm lg:flex-grow\">\r\n            <a\r\n              href=\"#responsive-header\"\r\n              className=\"block mt-4 lg:inline-block lg:mt-0 text-gray-600 hover:text-gray-700 mr-4\"\r\n            >\r\n              Countries\r\n            </a>\r\n          </div>\r\n        </div> */}\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport CountriesContainer from './containers/countries-container';\r\nimport Navbar from './components/navbar';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\" \">\r\n      <Navbar />\r\n      <div className=\"container  bg-white mx-auto\">\r\n        <CountriesContainer />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './reset-ui.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\r\nimport { grey, red } from '@material-ui/core/colors';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: grey,\r\n\r\n    secondary: {\r\n      main: '#2196f3',\r\n    },\r\n    success: red,\r\n  },\r\n});\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <MuiThemeProvider theme={theme}>\r\n      <App />\r\n    </MuiThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}