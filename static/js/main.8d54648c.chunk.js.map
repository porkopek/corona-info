{"version":3,"sources":["components/country-card.tsx","components/countries-filter-menu.tsx","containers/countries-container.tsx","components/navbar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CountryCard","country","lethality","deaths","cases","toFixed","replace","className","style","backgroundColor","src","countryInfo","flag","alt","toLocaleString","todayCases","todayDeaths","casesPerOneMillion","deathsPerOneMillion","FilterMenu","onSort","track","NovelCovid","CountriesContainer","useState","JSON","parse","localStorage","getItem","countries","setCountries","useEffect","a","sortBy","newCountries","filter","c","sort","b","length","countriesString","stringify","setItem","error","console","log","getCountries","map","key","Navbar","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"uNAKe,SAASA,EAAT,GAAqD,IAA9BC,EAA6B,EAA7BA,QAC9BC,GAAcD,EAAQE,OAASF,EAAQG,MAAS,KACnDC,QAAQ,GACRC,QAAQ,UAAW,IAEtB,OACE,yBAAKC,UAAU,0GAEb,yBACEA,UAAU,+CACVC,MAAO,CAAEC,gBAAiB,uBAE1B,yBAAKC,IAAKT,EAAQU,YAAYC,KAAMC,IAAI,GAAGN,UAAU,aACrD,wBAAIA,UAAU,0CACXN,EAAQA,UAIb,yBAAKM,UAAU,aACb,yBAAKA,UAAU,yBACb,uCACA,6BAAMN,EAAQG,MAAMU,mBAGtB,yBAAKP,UAAU,yBACb,6CACA,6BAAMN,EAAQc,WAAWD,mBAG3B,6BAEA,yBAAKP,UAAU,yBACb,wCACA,6BAAMN,EAAQE,OAAOW,mBAGvB,yBAAKP,UAAU,yBACb,8CACA,6BAAMN,EAAQe,YAAYF,mBAG5B,6BAEA,yBAAKP,UAAU,yBACb,2CACA,6BAAML,EAAN,MAGF,yBAAKK,UAAU,yBACb,8CACA,6BAAMN,EAAQgB,mBAAmBH,mBAGnC,yBAAKP,UAAU,yBACb,+CACA,6BAAMN,EAAQiB,wBCtDT,SAASC,EAAT,GAAmD,EAA7BC,OACnC,OAAO,8BCDT,IAAMC,EAAQ,I,KAAIC,YACH,SAASC,IAAsB,IAAD,EACTC,mBAC/BC,KAAKC,MAAMC,aAAaC,QAAQ,cAAgB,OAAuB,IAF/B,mBACpCC,EADoC,KACzBC,EADyB,KAiC3C,OA5BAC,qBAAU,YAEU,uCAAG,4CAAAC,EAAA,6DAAOC,EAAP,+BAA+B,QAA/B,SACWZ,EAAMQ,YADjB,OASnB,IARMK,EADa,OAEhBC,QAAO,SAACC,GAAD,OAAOA,EAAEhC,MAAQ,OACxBiC,MAAK,SAACL,EAAGM,GACR,OAAIA,EAAEL,GAAUD,EAAEC,GAAgB,EAC9BK,EAAEL,GAAUD,EAAEC,IAAiB,EAC5B,MAGMM,OACf,IACQC,EAAkBf,KAAKgB,UAAUP,GACvCP,aAAae,QAAQ,YAAaF,GAClCV,EAAaI,GACb,MAAOS,GACPC,QAAQC,IAAIF,GAfG,2CAAH,qDAsBdG,KAEH,IAGD,oCACE,kBAAC3B,EAAD,CAAYC,OAAQ,eAEpB,yBAAKb,UAAU,6CAAf,OACGsB,QADH,IACGA,OADH,EACGA,EAAWkB,KAAI,SAAC9C,GAAD,OACd,kBAACD,EAAD,CAAaC,QAASA,EAAS+C,IAAK/C,EAAQA,eC7CvC,SAASgD,IACtB,OACE,yBAAK1C,UAAU,0DACb,yBAAKA,UAAU,kEACb,yBAAKA,UAAU,oDACb,yBAAKG,IAAI,2BAA2BG,IAAI,GAAGN,UAAU,aACrD,0BAAMA,UAAU,0CAAhB,kBCQK2C,MAXf,WACE,OACE,yBAAK3C,UAAU,KACb,kBAAC0C,EAAD,MACA,yBAAK1C,UAAU,wCACb,kBAACgB,EAAD,SCGY4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxB,GACLC,QAAQD,MAAMA,EAAMyB,a","file":"static/js/main.8d54648c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Country } from '../interfaces';\r\ninterface CountryCardProps {\r\n  country: Country;\r\n}\r\nexport default function CountryCard({ country }: CountryCardProps) {\r\n  const lethality = ((country.deaths / country.cases) * 100)\r\n    .toFixed(2)\r\n    .replace(/[.,]00$/, '');\r\n\r\n  return (\r\n    <div className=\"shadow rounded-md overflow-hidden hover:shadow-2xl  transition duration-300 ease-in-out cursor-pointer\">\r\n      {/* header */}\r\n      <div\r\n        className=\"w-full flex justify-center items-center p-5 \"\r\n        style={{ backgroundColor: 'rgba(0, 0, 0, .04)' }}\r\n      >\r\n        <img src={country.countryInfo.flag} alt=\"\" className=\"h-4 mr-2\" />\r\n        <h3 className=\"font-bold uppercase text-black text-lg\">\r\n          {country.country}\r\n        </h3>\r\n      </div>\r\n      {/* body */}\r\n      <div className=\"px-6 py-2\">\r\n        <div className=\" flex justify-between\">\r\n          <div>Cases:</div>\r\n          <div>{country.cases.toLocaleString()}</div>\r\n        </div>\r\n\r\n        <div className=\" flex justify-between\">\r\n          <div>Today cases:</div>\r\n          <div>{country.todayCases.toLocaleString()}</div>\r\n        </div>\r\n\r\n        <br />\r\n\r\n        <div className=\" flex justify-between\">\r\n          <div>Deaths:</div>\r\n          <div>{country.deaths.toLocaleString()}</div>\r\n        </div>\r\n\r\n        <div className=\" flex justify-between\">\r\n          <div>Today deaths:</div>\r\n          <div>{country.todayDeaths.toLocaleString()}</div>\r\n        </div>\r\n\r\n        <br />\r\n\r\n        <div className=\" flex justify-between\">\r\n          <div>Lethality:</div>\r\n          <div>{lethality}%</div>\r\n        </div>\r\n\r\n        <div className=\" flex justify-between\">\r\n          <div>Cases per 1M:</div>\r\n          <div>{country.casesPerOneMillion.toLocaleString()}</div>\r\n        </div>\r\n\r\n        <div className=\" flex justify-between\">\r\n          <div>Deaths per 1M:</div>\r\n          <div>{country.deathsPerOneMillion}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Country } from '../interfaces';\r\n\r\ninterface FilterMenuOptions {\r\n  onSort: (property: keyof Country, mode: 'ASC' | 'DESC') => void;\r\n}\r\nexport default function FilterMenu({ onSort }: FilterMenuOptions) {\r\n  return <div></div>;\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { NovelCovid } from 'novelcovid';\r\nimport CountryCard from '../components/country-card';\r\nimport { countriesObject } from '../services/countries';\r\nimport { Country } from '../interfaces';\r\nimport FilterMenu from '../components/countries-filter-menu';\r\nconst track = new NovelCovid();\r\nexport default function CountriesContainer() {\r\n  const [countries, setCountries] = useState<Country[]>(\r\n    (JSON.parse(localStorage.getItem('countries') || '[]') as Country[]) || []\r\n  );\r\n\r\n  useEffect(() => {\r\n    // get the countries data\r\n    const getCountries = async (sortBy: keyof Country = 'cases') => {\r\n      const newCountries = (((await track.countries()) as unknown[]) as Country[])\r\n        .filter((c) => c.cases > 1000)\r\n        .sort((a, b) => {\r\n          if (b[sortBy] > a[sortBy]) return 1;\r\n          if (b[sortBy] < a[sortBy]) return -1;\r\n          return 0;\r\n        });\r\n\r\n      if (newCountries.length) {\r\n        try {\r\n          const countriesString = JSON.stringify(newCountries);\r\n          localStorage.setItem('countries', countriesString);\r\n          setCountries(newCountries as Country[]);\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      }\r\n    };\r\n\r\n    //WATCH\r\n    process.env.NODE_ENV === 'production'\r\n      ? getCountries()\r\n      : setCountries(countriesObject.sort((a, b) => b.deaths - a.deaths));\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <FilterMenu onSort={() => {}} />\r\n\r\n      <div className=\"grid md:grid-cols-3 gap-4  xl:grid-cols-3\">\r\n        {countries?.map((country) => (\r\n          <CountryCard country={country} key={country.country} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nexport default function Navbar() {\r\n  return (\r\n    <nav className=\" p-6 fixed w-screen top-0 bg-white shadow-md uppercase\">\r\n      <div className=\"container mx-auto flex items-center justify-between flex-wrap \">\r\n        <div className=\" flex items-center flex-shrink-0 text-black mr-6\">\r\n          <img src=\"/corona-info/favicon.png\" alt=\"\" className=\"w-8 mr-2\" />\r\n          <span className=\"font-semibold text-2xl tracking-tight \">\r\n            Corona Info\r\n          </span>\r\n        </div>\r\n        {/* <div className=\"block lg:hidden\">\r\n          <button className=\"flex items-center px-3 py-2 border rounded text-black border-gray-400 hover:text-white hover:border-white\">\r\n            <svg\r\n              className=\"fill-current h-3 w-3\"\r\n              viewBox=\"0 0 20 20\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n            >\r\n              <title>Menu</title>\r\n              <path d=\"M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z\" />\r\n            </svg>\r\n          </button>\r\n        </div> */}\r\n        {/* <div className=\"w-full block flex-grow lg:flex lg:items-center lg:w-auto\">\r\n          <div className=\"text-sm lg:flex-grow\">\r\n            <a\r\n              href=\"#responsive-header\"\r\n              className=\"block mt-4 lg:inline-block lg:mt-0 text-gray-600 hover:text-gray-700 mr-4\"\r\n            >\r\n              Countries\r\n            </a>\r\n          </div>\r\n        </div> */}\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n","import React from 'react';\nimport CountriesContainer from './containers/countries-container';\nimport Navbar from './components/navbar';\n\nfunction App() {\n  return (\n    <div className=\" \">\n      <Navbar />\n      <div className=\"container max-w-5xl bg-white mx-auto\">\n        <CountriesContainer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}