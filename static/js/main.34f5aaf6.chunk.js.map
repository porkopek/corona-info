{"version":3,"sources":["components/card-property.tsx","components/country-card.tsx","components/country-properties-sorter.tsx","components/average-row.tsx","components/countries-table.tsx","components/view-selector.tsx","models/country.ts","services/dataProvider.ts","containers/countries-container.tsx","components/navbar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CardProperty","text","value","isActive","isNew","className","style","left","title","width","CountryCard","country","activeProperty","index","previousData","backgroundColor","src","countryInfo","flag","alt","isNewData","cases","toLocaleString","todayCases","deaths","todayDeaths","lethality","toFixed","casesPerOneMillion","deathsPerOneMillion","tests","testsPerOneMillion","PropertiesSorter","onSort","FormControl","variant","minWidth","InputLabel","id","Select","labelId","onChange","e","target","label","MenuItem","AverageRow","sortedStyle","average","TableRow","key","TableCell","align","component","scope","map","property","CountriesTable","countries","sortProperty","onSelectCountry","selectedCountries","getTruncatedAverage","TableContainer","Paper","Table","size","aria-label","stickyHeader","TableHead","TableBody","i","getAverageStyle","Checkbox","name","iso2","checked","includes","fontWeight","borderRight","borderLeft","boxShadow","zIndex","undefined","truncatedAverage","truncated","c","sort","length","pop","shift","reduce","a","b","result","Math","round","averageProperty","countryProperty","ratio","ViewSelector","view","onChangeView","Button","height","onClick","Apps","FormatListNumbered","Country","recovered","critical","updated","active","this","lethalityString","Number","countriesUrl","getCountriesJson","minCases","countriesJson","fetch","json","filter","Object","assign","console","log","CountriesContainer","useState","setCountries","setSelectedCountries","JSON","parse","localStorage","getItem","setPreviousData","setSortProperty","setView","filterFlag","setFilterFlag","useEffect","newData","countriesString","stringify","setItem","error","getCountries","data","sortFunction","newCountries","slice","oldCountries","FormControlLabel","control","Switch","CircularProgress","color","countryName","newSelectedCountries","position","indexOf","splice","push","Navbar","App","Boolean","window","location","hostname","match","theme","createMuiTheme","palette","primary","grey","secondary","main","success","red","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.34f5aaf6.chunk.js","sourcesContent":["import React from 'react';\r\nexport default function CardProperty({\r\n  text,\r\n  value,\r\n  isActive = false,\r\n  isNew = false,\r\n}: {\r\n  text: string;\r\n  value?: string;\r\n  isActive?: boolean;\r\n  isNew?: boolean;\r\n}) {\r\n  const activeState = 'font-bold';\r\n  return (\r\n    <div\r\n      className={`flex justify-between items-center relative pl-2 ${\r\n        isActive && activeState\r\n      } rounded-lg`}\r\n    >\r\n      {/* red dot pulsing if new data  */}\r\n      {isNew ? (\r\n        <div\r\n          className=\"blob green absolute \"\r\n          style={{ left: -35 }}\r\n          title=\"there's new data since the last time you visited the site\"\r\n        ></div>\r\n      ) : (\r\n        <div className=\"absolute left-0\" style={{ width: 10 }}></div>\r\n      )}\r\n      <span>{text}:</span>\r\n\r\n      <div>{value}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport CardProperty from './card-property';\r\nimport Country from '../models/country';\r\nimport './country-card.css';\r\ninterface CountryCardProps {\r\n  country: Country;\r\n  previousData: Country;\r\n  activeProperty: keyof Country;\r\n  index: number;\r\n}\r\nexport default function CountryCard({\r\n  country,\r\n  activeProperty,\r\n  index,\r\n  previousData,\r\n}: CountryCardProps) {\r\n  return (\r\n    <div className=\"shadow rounded-md overflow-hidden hover:shadow-md  transition duration-300 ease-in-out cursor-pointer\">\r\n      {/* header */}\r\n      <div\r\n        className=\"w-full flex justify-center items-center p-5 font-bold uppercase text-black text-lg relative\"\r\n        style={{ backgroundColor: 'rgba(0,0,0,.04)' }}\r\n      >\r\n        <span className=\"absolute\" style={{ left: '2rem' }}>\r\n          {index}.\r\n        </span>\r\n        <img src={country.countryInfo?.flag} alt=\"\" className=\"h-4 mr-2\" />\r\n        <h3>{country.country}</h3>\r\n        {country.isNewData && (\r\n          <div\r\n            className=\"blob green\"\r\n            title=\"there is new data from the last time you visited the site\"\r\n          ></div>\r\n        )}\r\n      </div>\r\n      {/* body */}\r\n      <div className=\"px-6 py-2\">\r\n        <CardProperty\r\n          text=\"Cases\"\r\n          value={country.cases.toLocaleString()}\r\n          isActive={activeProperty === 'cases'}\r\n          isNew={previousData?.cases !== country.cases}\r\n        />\r\n        <CardProperty\r\n          text=\"Today cases\"\r\n          value={country.todayCases?.toLocaleString()}\r\n          isActive={activeProperty === 'todayCases'}\r\n          isNew={previousData?.todayCases !== country.todayCases}\r\n        />\r\n        <br className=\"my-3\" />\r\n        <CardProperty\r\n          text=\"Deaths\"\r\n          value={country.deaths?.toLocaleString()}\r\n          isActive={activeProperty === 'deaths'}\r\n          isNew={previousData?.deaths !== country.deaths}\r\n        />\r\n        <CardProperty\r\n          text=\"Today deaths\"\r\n          value={country.todayDeaths?.toLocaleString()}\r\n          isActive={activeProperty === 'todayDeaths'}\r\n          isNew={previousData?.todayDeaths !== country.todayDeaths}\r\n        />\r\n        <br className=\"my-3\" />\r\n        <CardProperty\r\n          text=\"Lethality\"\r\n          value={country.lethality ? country.lethality.toFixed(2) + '%' : '0%'}\r\n          isActive={activeProperty === 'lethality'}\r\n          isNew={previousData?.lethality !== country.lethality}\r\n        />\r\n        <CardProperty\r\n          text=\"Cases per 1M\"\r\n          value={country.casesPerOneMillion.toLocaleString()}\r\n          isActive={activeProperty === 'casesPerOneMillion'}\r\n          isNew={\r\n            previousData?.casesPerOneMillion !== country.casesPerOneMillion\r\n          }\r\n        />\r\n        <CardProperty\r\n          text=\"Deaths per 1M\"\r\n          value={country.deathsPerOneMillion.toLocaleString()}\r\n          isActive={activeProperty === 'deathsPerOneMillion'}\r\n          isNew={\r\n            previousData?.deathsPerOneMillion !== country.deathsPerOneMillion\r\n          }\r\n        />\r\n        <br />\r\n        <CardProperty\r\n          text=\"Tests\"\r\n          value={country.tests.toLocaleString()}\r\n          isActive={activeProperty === 'tests'}\r\n          isNew={previousData?.tests !== country.tests}\r\n        />\r\n        <CardProperty\r\n          text=\"Tests per 1M\"\r\n          value={country.testsPerOneMillion.toLocaleString()}\r\n          isActive={activeProperty === 'testsPerOneMillion'}\r\n          isNew={\r\n            previousData?.testsPerOneMillion !== country.testsPerOneMillion\r\n          }\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Country from '../models/country';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { withStyles, Theme, createStyles, InputBase } from '@material-ui/core';\r\nimport './select.css';\r\nimport { CountryProps } from '../interfaces';\r\ninterface FilterMenuOptions {\r\n  onSort: (property?: CountryProps, mode?: 'ASC' | 'DESC') => void;\r\n}\r\n\r\nexport default function PropertiesSorter({ onSort }: FilterMenuOptions) {\r\n  const handleSort = (e: React.ChangeEvent<{ value: unknown }>) => {\r\n    const value = e.target.value as CountryProps;\r\n\r\n    onSort(value);\r\n  };\r\n  return (\r\n    <>\r\n      <FormControl\r\n        variant=\"filled\"\r\n        className=\"border-10 border\"\r\n        style={{ minWidth: 180 }}\r\n      >\r\n        <InputLabel id=\"select-label\">Sort by</InputLabel>\r\n        <Select\r\n          labelId=\"select-label\"\r\n          id=\"select\"\r\n          onChange={handleSort}\r\n          label=\"Sort by\"\r\n        >\r\n          <MenuItem value=\"cases\">cases</MenuItem>\r\n          <MenuItem value=\"todayCases\">today cases</MenuItem>\r\n          <MenuItem value=\"deaths\">deaths</MenuItem>\r\n          <MenuItem value=\"todayDeaths\">today deaths</MenuItem>\r\n          <br />\r\n          <MenuItem value=\"lethality\">lethality</MenuItem>\r\n\r\n          <MenuItem value=\"casesPerOneMillion\">cases per 1M</MenuItem>\r\n          <MenuItem value=\"deathsPerOneMillion\">deaths per 1M</MenuItem>\r\n          <br />\r\n          <MenuItem value=\"tests\">tests</MenuItem>\r\n          <MenuItem value=\"testsPerOneMillion\">tests per 1M</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { TableRow, TableCell } from '@material-ui/core';\r\nimport { CountryProps } from '../interfaces';\r\nexport function AverageRow({\r\n  sortedStyle,\r\n  average,\r\n}: {\r\n  sortedStyle: string;\r\n  average: {\r\n    [key: string]: number;\r\n  };\r\n}) {\r\n  return (\r\n    <TableRow key=\"average\">\r\n      <TableCell\r\n        align=\"right\"\r\n        className={sortedStyle + ' font-bold'}\r\n      ></TableCell>\r\n\r\n      <TableCell component=\"th\" scope=\"row\" className={sortedStyle}>\r\n        <span className=\"font-bold\">Average*</span>\r\n      </TableCell>\r\n      {([\r\n        'cases',\r\n        'todayCases',\r\n        'deaths',\r\n        'todayDeaths',\r\n        'lethality',\r\n        'casesPerOneMillion',\r\n        'deathsPerOneMillion',\r\n        'tests',\r\n        'testsPerOneMillion',\r\n      ] as CountryProps[]).map((property) => {\r\n        return (\r\n          <TableCell align=\"right\" className={sortedStyle + ' font-bold'}>\r\n            <span className=\"font-bold\">\r\n              {average[property].toLocaleString()}\r\n              {property === 'lethality' && '.00%'}\r\n            </span>\r\n          </TableCell>\r\n        );\r\n      })}\r\n    </TableRow>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport {\r\n  Paper,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  Checkbox,\r\n} from '@material-ui/core';\r\nimport LanguageIcon from '@material-ui/icons/Language';\r\nimport Country from '../models/country';\r\nimport { AverageRow } from './average-row';\r\nimport { CountryProps } from '../interfaces';\r\n\r\nimport './countries-table.css';\r\ninterface CountriesTableProps {\r\n  countries: Country[];\r\n  sortProperty: CountryProps;\r\n  onSelectCountry: any;\r\n  selectedCountries: string[];\r\n}\r\nexport default function CountriesTable({\r\n  countries,\r\n  sortProperty = 'cases',\r\n  onSelectCountry,\r\n  selectedCountries,\r\n}: CountriesTableProps) {\r\n  const sortedStyle = 'font-bold';\r\n  const average = getTruncatedAverage(countries);\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table size=\"small\" aria-label=\"a dense table\" stickyHeader>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell align=\"center\">\r\n              <span className=\"font-bold\">#</span>\r\n            </TableCell>\r\n            <TableCell>Country</TableCell>\r\n            <TableCell align=\"center\">Cases</TableCell>\r\n            <TableCell align=\"center\">Today cases</TableCell>\r\n            <TableCell align=\"center\">Deaths</TableCell>\r\n            <TableCell align=\"center\">Today deaths</TableCell>\r\n            <TableCell align=\"center\">Lethality</TableCell>\r\n            <TableCell align=\"center\">Cases per 1M</TableCell>\r\n            <TableCell align=\"center\">Deaths per 1M</TableCell>\r\n            <TableCell align=\"center\">Tests</TableCell>\r\n            <TableCell align=\"center\">Tests per 1M</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {/***Average row***/}\r\n          <AverageRow sortedStyle={sortedStyle} average={average} />\r\n\r\n          {countries.map((country, i) => {\r\n            const averageStyle = getAverageStyle(\r\n              country,\r\n              sortProperty,\r\n              average\r\n            );\r\n            return (\r\n              <TableRow key={country.country}>\r\n                <TableCell align=\"right\">\r\n                  <span className=\"flex items-center\">\r\n                    <span className=\"font-bold\">{i + 1}</span>\r\n                    <Checkbox\r\n                      name={`${country.countryInfo?.iso2}`}\r\n                      onChange={(e) => onSelectCountry(e.target.name)}\r\n                      size=\"small\"\r\n                      checked={selectedCountries.includes(\r\n                        country.countryInfo?.iso2 || ''\r\n                      )}\r\n                    />\r\n                  </span>\r\n                </TableCell>\r\n\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  <span className=\"flex items-center\">\r\n                    <img\r\n                      className=\"w-4 mr-2\"\r\n                      src={`${country.countryInfo?.flag}`}\r\n                      alt=\"\"\r\n                    />\r\n                    <span>{country.country}</span>\r\n                  </span>\r\n                </TableCell>\r\n                {([\r\n                  'cases',\r\n                  'todayCases',\r\n                  'deaths',\r\n                  'todayDeaths',\r\n                  'lethality',\r\n                  'casesPerOneMillion',\r\n                  'deathsPerOneMillion',\r\n                  'tests',\r\n                  'testsPerOneMillion',\r\n                ] as CountryProps[]).map((property) => {\r\n                  return (\r\n                    <TableCell\r\n                      style={\r\n                        sortProperty === property\r\n                          ? {\r\n                              fontWeight: 'bold',\r\n                              borderRight: '1px solid rgba(0,0,0,.3)',\r\n                              borderLeft: '1px solid rgba(0,0,0,.3)',\r\n                              boxShadow: '0 0 5px rgba(0,0,0,.1)',\r\n                              zIndex: 11,\r\n                            }\r\n                          : undefined\r\n                      }\r\n                      className={`${getAverageStyle(\r\n                        country,\r\n                        property,\r\n                        average\r\n                      )}`}\r\n                      align=\"right\"\r\n                    >\r\n                      {country[property]?.toLocaleString()}\r\n                      {property === 'lethality' && '%'}\r\n                    </TableCell>\r\n                  );\r\n                })}\r\n              </TableRow>\r\n            );\r\n          })}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n\r\nconst getTruncatedAverage = (countries: Country[]) => {\r\n  const properties = [\r\n    'cases',\r\n    'todayCases',\r\n    'deaths',\r\n    'todayDeaths',\r\n    'lethality',\r\n    'casesPerOneMillion',\r\n    'deathsPerOneMillion',\r\n    'tests',\r\n    'testsPerOneMillion',\r\n  ];\r\n  let truncatedAverage: { [key: string]: number } = {};\r\n\r\n  properties.map((property) => {\r\n    const truncated = countries.map((c: any) => c[property] as number).sort();\r\n    if (countries.length > 10) {\r\n      truncated.pop();\r\n      truncated.pop();\r\n      truncated.shift();\r\n      truncated.shift();\r\n    }\r\n\r\n    const sum = truncated.reduce((a, b) => a + b);\r\n    const average = sum / countries.length;\r\n    const result = Math.round(average);\r\n    truncatedAverage[property] = result;\r\n  });\r\n\r\n  return truncatedAverage;\r\n};\r\n\r\nconst getAverageStyle = (\r\n  country: Country,\r\n  property: CountryProps,\r\n  average: { [key: string]: number }\r\n) => {\r\n  const averageProperty = average[property];\r\n  const countryProperty = country[property];\r\n  const ratio = averageProperty / countryProperty;\r\n  if (property === 'tests' || property === 'testsPerOneMillion') {\r\n    if (ratio < 0.1) return 'bg-green-300';\r\n    if (ratio < 0.2) return 'bg-green-200';\r\n    if (ratio < 0.3) return 'bg-green-100';\r\n\r\n    if (averageProperty > countryProperty * 8) return 'bg-red-300';\r\n    if (averageProperty > countryProperty * 6) return 'bg-red-200';\r\n    if (averageProperty > countryProperty * 4) return 'bg-red-100';\r\n\r\n    return 'bg-white';\r\n  }\r\n\r\n  if (property === 'lethality') {\r\n    if (averageProperty > countryProperty * 6) return 'bg-green-300';\r\n    if (averageProperty > countryProperty * 4) return 'bg-green-200';\r\n    if (averageProperty > countryProperty * 2) return 'bg-green-100';\r\n\r\n    if (countryProperty > averageProperty * 3) return 'bg-red-300';\r\n    if (countryProperty > averageProperty * 2.5) return 'bg-red-200';\r\n    if (countryProperty > averageProperty * 2) return 'bg-red-100';\r\n\r\n    return 'bg-white';\r\n  }\r\n\r\n  if (ratio < 0.1) return 'bg-red-300';\r\n  if (ratio < 0.2) return 'bg-red-200';\r\n  if (ratio < 0.3) return 'bg-red-100';\r\n\r\n  if (averageProperty > countryProperty * 8) return 'bg-green-300';\r\n  if (averageProperty > countryProperty * 7) return 'bg-green-200';\r\n  if (averageProperty > countryProperty * 5) return 'bg-green-100';\r\n\r\n  return 'bg-white';\r\n};\r\n","import React from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport { Apps, FormatListNumbered } from '@material-ui/icons';\r\n\r\ninterface ViewSelectorProps {\r\n  view: 'cards' | 'table';\r\n  onChangeView: (view: 'cards' | 'table') => void;\r\n}\r\nexport default function ViewSelector({\r\n  view,\r\n  onChangeView,\r\n}: ViewSelectorProps) {\r\n  return (\r\n    <div className=\"ml-3 flex items-center\">\r\n      <Button\r\n        style={{ height: '100%' }}\r\n        onClick={() => {\r\n          const nextView = view === 'cards' ? 'table' : 'cards';\r\n          return onChangeView(nextView);\r\n        }}\r\n        variant=\"contained\"\r\n      >\r\n        {view !== 'cards' ? <Apps /> : <FormatListNumbered />}\r\n        <span className=\"ml-3 normal-case\">\r\n          {view !== 'cards' ? 'Cards View' : 'Table View'}\r\n        </span>\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","export default class Country {\r\n  country?: string;\r\n  countryInfo:\r\n    | {\r\n        _id: number | null;\r\n        latitude: number;\r\n        longitude: number;\r\n        flag: string;\r\n        iso3: string | null;\r\n        iso2: string | null;\r\n      }\r\n    | undefined;\r\n  todayCases: number = 0;\r\n  deaths: number = 0;\r\n  todayDeaths: number = 0;\r\n  recovered: number = 0;\r\n  critical: number = 0;\r\n  deathsPerOneMillion: number = 0;\r\n  updated: number = 0;\r\n  tests: number = 0;\r\n  testsPerOneMillion: number = 0;\r\n  active: number = 0;\r\n  cases: number = 0;\r\n  casesPerOneMillion: number = 0;\r\n  isNewData: boolean = false;\r\n  public get lethality() {\r\n    const lethalityString = (\r\n      this.deaths &&\r\n      this.cases &&\r\n      (this.deaths / this.cases) * 100\r\n    ).toFixed(2);\r\n\r\n    const result = Number(lethalityString);\r\n    return result;\r\n  }\r\n  toJSON() {\r\n    return { ...this, lethality: this.lethality };\r\n  }\r\n}\r\n","import Country from '../models/country';\r\nimport { CountryProps } from '../interfaces';\r\n\r\nconst countriesUrl = 'https://corona.lmao.ninja/v2/countries';\r\nexport default async function getCountriesJson(\r\n  minCases: number,\r\n  sortProperty: CountryProps\r\n) {\r\n  let countriesJson: Country[] = [];\r\n\r\n  try {\r\n    countriesJson = await await (await fetch(countriesUrl)).json();\r\n    const countries = countriesJson\r\n      .filter((c) => c.cases > minCases)\r\n      .sort((a, b) => b[sortProperty] - a[sortProperty])\r\n      .map((c) => Object.assign(new Country(), c));\r\n\r\n    return countries;\r\n  } catch (error) {\r\n    console.log(error);\r\n    return [];\r\n  }\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { NovelCovid } from 'novelcovid';\r\nimport CountryCard from '../components/country-card';\r\nimport PropertiesSorter from '../components/country-properties-sorter';\r\nimport Country from '../models/country';\r\nimport './countries-container.css';\r\nimport { CircularProgress, FormControlLabel, Switch } from '@material-ui/core';\r\nimport CountryFilter from '../components/country-filter';\r\nimport CountriesTable from '../components/countries-table';\r\nimport ViewSelector from '../components/view-selector';\r\nimport { CountryProps } from '../interfaces';\r\nimport getCountriesJson from '../services/dataProvider';\r\nexport default function CountriesContainer() {\r\n  const [countries, setCountries] = useState<Country[]>([]);\r\n  const [selectedCountries, setSelectedCountries] = useState<string[]>([]);\r\n  const [previousData, setPreviousData] = useState<Country[]>(\r\n    (JSON.parse(localStorage.getItem('countries') || '[]') as Country[]) || []\r\n  );\r\n  const [sortProperty, setSortProperty] = useState<CountryProps>('cases');\r\n  const [view, setView] = useState<'cards' | 'table'>('table');\r\n  const [filterFlag, setFilterFlag] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    // fetch the countries data\r\n    const getCountries = async () => {\r\n      const newData = await getCountriesJson(1000, 'cases');\r\n\r\n      if (newData.length) {\r\n        try {\r\n          const countriesString = JSON.stringify(newData);\r\n          localStorage.setItem('countries', countriesString);\r\n          setCountries(newData as Country[]);\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      }\r\n    };\r\n\r\n    //WATCH\r\n    getCountries();\r\n  }, []);\r\n\r\n  const handleSort = (property: CountryProps = 'cases') => {\r\n    setSortProperty(property);\r\n    const sortFunction = (a: Country, b: Country): 1 | -1 | 0 => {\r\n      if (b[property]! > a[property]!) return 1;\r\n      if (b[property]! < a[property]!) return -1;\r\n      return 0;\r\n    };\r\n    var newCountries = countries.slice().sort(sortFunction);\r\n    var oldCountries = previousData.slice().sort(sortFunction);\r\n    setCountries(newCountries);\r\n    setPreviousData(oldCountries);\r\n  };\r\n\r\n  const handleChangeView = (view: 'cards' | 'table') => {\r\n    setView(view);\r\n  };\r\n\r\n  const handleSelectCountry = (countryName: string) => {\r\n    const newSelectedCountries = selectedCountries.slice();\r\n    const position = newSelectedCountries.indexOf(countryName);\r\n    if (position !== -1) {\r\n      newSelectedCountries.splice(position, 1);\r\n    } else {\r\n      newSelectedCountries.push(countryName);\r\n    }\r\n    setSelectedCountries(newSelectedCountries);\r\n  };\r\n\r\n  const toggleFilterFlag = (e: any, filter: boolean) => {\r\n    setFilterFlag(filter);\r\n  };\r\n\r\n  //data is going to be displayed; filtered or not\r\n  let data = countries || previousData;\r\n  if (filterFlag) {\r\n    data = data.filter((country) =>\r\n      selectedCountries.includes(country.countryInfo?.iso2 || '')\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"flex mb-2  flex-auto  p-2\"\r\n        style={{ backgroundColor: 'rgba(0, 0, 0, 0.04)' }}\r\n      >\r\n        <PropertiesSorter onSort={handleSort} />\r\n        <ViewSelector view={view} onChangeView={handleChangeView} />\r\n        <span className=\"ml-4 flex\">\r\n          <FormControlLabel\r\n            control={\r\n              <Switch\r\n                name=\"checkedA\"\r\n                size=\"small\"\r\n                checked={filterFlag}\r\n                onChange={toggleFilterFlag}\r\n              />\r\n            }\r\n            label=\"Filter\"\r\n          />\r\n        </span>\r\n      </div>\r\n      {/* <CountryFilter countries={countries.map((c) => c.country || '')} /> */}\r\n      {data?.length === 0 && (\r\n        <div className=\"flex justify-center items-center\">\r\n          <CircularProgress color=\"primary\" size={20} />\r\n          <span className=\"ml-2\">Loading</span>\r\n        </div>\r\n      )}\r\n      {view === 'cards' ? (\r\n        <div className=\"grid md:grid-cols-3 gap-4  xl:grid-cols-3\">\r\n          {data?.map((country, id) => (\r\n            <CountryCard\r\n              index={id + 1}\r\n              country={country}\r\n              key={country.country}\r\n              activeProperty={sortProperty}\r\n              previousData={previousData[id]}\r\n            />\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        data.length !== 0 && (\r\n          <CountriesTable\r\n            onSelectCountry={handleSelectCountry}\r\n            countries={data}\r\n            sortProperty={sortProperty}\r\n            selectedCountries={selectedCountries}\r\n          />\r\n        )\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nexport default function Navbar() {\r\n  return (\r\n    <nav className=\" p-6 mb-3 w-screen top-0 bg-white shadow-md uppercase z-10\">\r\n      <div className=\"container mx-auto flex items-center justify-between flex-wrap \">\r\n        <div className=\" flex items-center flex-shrink-0 text-black mr-6\">\r\n          <img src=\"/corona-info/favicon.png\" alt=\"\" className=\"w-8 mr-2\" />\r\n          <span className=\"font-semibold text-2xl tracking-tight \">\r\n            Corona Info\r\n          </span>\r\n        </div>\r\n        {/* <div className=\"block lg:hidden\">\r\n          <button className=\"flex items-center px-3 py-2 border rounded text-black border-gray-400 hover:text-white hover:border-white\">\r\n            <svg\r\n              className=\"fill-current h-3 w-3\"\r\n              viewBox=\"0 0 20 20\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n            >\r\n              <title>Menu</title>\r\n              <path d=\"M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z\" />\r\n            </svg>\r\n          </button>\r\n        </div> */}\r\n        {/* <div className=\"w-full block flex-grow lg:flex lg:items-center lg:w-auto\">\r\n          <div className=\"text-sm lg:flex-grow\">\r\n            <a\r\n              href=\"#responsive-header\"\r\n              className=\"block mt-4 lg:inline-block lg:mt-0 text-gray-600 hover:text-gray-700 mr-4\"\r\n            >\r\n              Countries\r\n            </a>\r\n          </div>\r\n        </div> */}\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport CountriesContainer from './containers/countries-container';\r\nimport Navbar from './components/navbar';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\" \">\r\n      <Navbar />\r\n      <div className=\"container max-w-5xl bg-white mx-auto\">\r\n        <CountriesContainer />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\r\nimport purple from '@material-ui/core/colors/purple';\r\nimport { grey, red } from '@material-ui/core/colors';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: grey,\r\n\r\n    secondary: {\r\n      main: '#2196f3',\r\n    },\r\n    success: red,\r\n  },\r\n});\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <MuiThemeProvider theme={theme}>\r\n      <App />\r\n    </MuiThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}