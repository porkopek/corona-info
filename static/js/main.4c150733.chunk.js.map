{"version":3,"sources":["components/card-property.tsx","components/country-card.tsx","components/country-properties-sorter.tsx","components/average-row.tsx","components/countries-table.tsx","components/view-selector.tsx","models/country.ts","services/dataProvider.ts","components/report-linechart.tsx","components/report-barchart.tsx","components/country-statistics.tsx","containers/countries-container.tsx","components/navbar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CardProperty","text","isActive","value","currentValue","previousValue","increasedValue","className","toLocaleString","Math","floor","undefined","CountryCard","country","activeProperty","previousData","onSelectCountry","onClick","e","style","backgroundColor","left","ranking","src","countryInfo","flag","alt","isNewData","title","cases","todayCases","deaths","todayDeaths","lethality","casesPerOneMillion","deathsPerOneMillion","tests","testsPerOneMillion","PropertiesSorter","onSort","FormControl","variant","minWidth","InputLabel","id","Select","labelId","onChange","target","label","MenuItem","AverageRow","sortedStyle","average","TableRow","key","TableCell","align","component","scope","map","property","CountriesTable","countries","sortProperty","onShowStats","selectedCountries","TableContainer","Paper","Table","size","aria-label","stickyHeader","TableHead","TableBody","i","Checkbox","name","iso2","checked","includes","fontWeight","borderRight","borderLeft","boxShadow","zIndex","getAverageStyle","averageProperty","countryProperty","ratio","ViewSelector","view","onChangeView","cardsViewText","isMobile","tableViewText","Button","height","Apps","FormatListNumbered","Country","recovered","critical","updated","active","this","lethalityString","toFixed","Number","countriesUrl","getCountriesJson","minCases","a","countriesJson","fetch","json","filter","c","sort","b","Object","assign","forEach","console","log","countryUrl","countryName","getCountryReport","countryJson","timeline","days","keys","k","arr","items","split","length","date","getMonthAbb","acumulatedCases","acumulatedDeaths","d","x","ReportLineChart","report","scale","width","maxWidth","padding","color","margin","borderRadius","data","barSize","dataKey","allowDataOverflow","stroke","domain","strokeDasharray","type","dot","r","fill","ReportBarChart","field","slice","reduce","replace","round","content","toLowerCase","y","isFront","CustomTooltip","payload","CountryStats","open","onClose","useState","setReport","useEffect","loadedReport","getCountryStats","Dialog","aria-labelledby","fullWidth","DialogTitle","DialogContent","CircularProgress","DialogActions","autoFocus","CountriesContainer","setCountries","setSelectedCountries","selectedCountry","setSelectedCountry","JSON","parse","localStorage","getItem","previousCountries","setPreviousCountries","setSortProperty","setView","filterFlag","setFilterFlag","newData","countriesString","stringify","setItem","error","getCountries","handleShowCountryStatistics","dataToRender","getTruncatedAverage","sortByProperty","sortedNewCountries","sortedPreviousCountries","FormControlLabel","control","Switch","disabled","find","newSelectedCountries","position","indexOf","splice","push","truncatedAverage","truncated","pop","shift","result","Navbar","App","Boolean","window","location","hostname","match","theme","createMuiTheme","palette","primary","grey","secondary","main","success","red","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4c150733.chunk.js","sourcesContent":["import React from 'react';\r\nexport default function CardProperty({\r\n  text,\r\n  isActive = false,\r\n  currentValue: value,\r\n  previousValue,\r\n}: {\r\n  text: string;\r\n  isActive?: boolean;\r\n  currentValue: number;\r\n  previousValue?: number;\r\n}) {\r\n  const activeState = 'font-bold';\r\n  const increasedValue = previousValue ? value - previousValue : 0;\r\n  return (\r\n    <div\r\n      className={`flex justify-between items-center relative pl-2 ${\r\n        isActive && activeState\r\n      } rounded-lg`}\r\n    >\r\n      {/* red dot pulsing if new data  */}\r\n\r\n      <span>{text}:</span>\r\n\r\n      <div>\r\n        {value.toLocaleString()}{' '}\r\n        <span className=\"text-red-800  font-normal\">\r\n          {Math.floor(increasedValue) !== 0\r\n            ? `(▲ ${Math.floor(increasedValue)})`\r\n            : undefined}\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport CardProperty from './card-property';\r\nimport Country from '../models/country';\r\nimport './country-card.css';\r\ninterface CountryCardProps {\r\n  country: Country;\r\n  previousData?: Country;\r\n  activeProperty: keyof Country;\r\n  onSelectCountry: (country?: Country) => void;\r\n}\r\nexport default function CountryCard({\r\n  country,\r\n  activeProperty,\r\n  previousData,\r\n  onSelectCountry,\r\n}: CountryCardProps) {\r\n  return (\r\n    <div className=\"shadow rounded-md overflow-hidden hover:shadow-md  transition duration-300 ease-in-out \">\r\n      {/* header */}\r\n      <div\r\n        onClick={(e) => onSelectCountry(country)}\r\n        className=\"w-full cursor-pointer flex justify-center items-center p-5 font-bold uppercase text-black text-lg relative\"\r\n        style={{ backgroundColor: 'rgba(0,0,0,.04)' }}\r\n      >\r\n        <span className=\"absolute\" style={{ left: '2rem' }}>\r\n          {country.ranking}.\r\n        </span>\r\n        <img src={country.countryInfo?.flag} alt=\"\" className=\"h-4 mr-2\" />\r\n        <h3>{country.country}</h3>\r\n\r\n        {country.isNewData && (\r\n          <div\r\n            className=\"blob green\"\r\n            title=\"there is new data from the last time you visited the site\"\r\n          ></div>\r\n        )}\r\n      </div>\r\n      {/* body */}\r\n      <div className=\"px-6 py-2\">\r\n        <CardProperty\r\n          text=\"Cases\"\r\n          currentValue={country.cases}\r\n          previousValue={previousData?.cases}\r\n          isActive={activeProperty === 'cases'}\r\n        />\r\n        <CardProperty\r\n          text=\"Today cases\"\r\n          currentValue={country.todayCases}\r\n          previousValue={previousData?.todayCases}\r\n          isActive={activeProperty === 'todayCases'}\r\n        />\r\n        <br className=\"my-3\" />\r\n        <CardProperty\r\n          text=\"Deaths\"\r\n          currentValue={country.deaths}\r\n          previousValue={previousData?.deaths}\r\n          isActive={activeProperty === 'deaths'}\r\n        />\r\n        <CardProperty\r\n          text=\"Today deaths\"\r\n          currentValue={country.todayDeaths}\r\n          previousValue={previousData?.todayDeaths}\r\n          isActive={activeProperty === 'todayDeaths'}\r\n        />\r\n        <br className=\"my-3\" />\r\n        <CardProperty\r\n          text=\"Lethality\"\r\n          currentValue={country.lethality}\r\n          previousValue={previousData?.lethality}\r\n          isActive={activeProperty === 'lethality'}\r\n        />\r\n        <CardProperty\r\n          text=\"Cases per 1M\"\r\n          currentValue={country.casesPerOneMillion}\r\n          previousValue={previousData?.casesPerOneMillion}\r\n          isActive={activeProperty === 'casesPerOneMillion'}\r\n        />\r\n        <CardProperty\r\n          text=\"Deaths per 1M\"\r\n          currentValue={country.deathsPerOneMillion}\r\n          previousValue={previousData?.deathsPerOneMillion}\r\n          isActive={activeProperty === 'deathsPerOneMillion'}\r\n        />\r\n        <br />\r\n        <CardProperty\r\n          text=\"Tests\"\r\n          currentValue={country.tests}\r\n          previousValue={previousData?.tests}\r\n          isActive={activeProperty === 'tests'}\r\n        />\r\n        <CardProperty\r\n          text=\"Tests per 1M\"\r\n          currentValue={country.testsPerOneMillion}\r\n          previousValue={previousData?.testsPerOneMillion}\r\n          isActive={activeProperty === 'testsPerOneMillion'}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport './select.css';\r\nimport { CountryProps } from '../interfaces';\r\ninterface FilterMenuOptions {\r\n  onSort: (property?: CountryProps, mode?: 'ASC' | 'DESC') => void;\r\n}\r\n\r\nexport default function PropertiesSorter({ onSort }: FilterMenuOptions) {\r\n  const handleSort = (e: React.ChangeEvent<{ value: unknown }>) => {\r\n    const value = e.target.value as CountryProps;\r\n\r\n    onSort(value);\r\n  };\r\n  return (\r\n    <>\r\n      <FormControl\r\n        variant=\"filled\"\r\n        className=\"border-10 border\"\r\n        style={{ minWidth: 135 }}\r\n      >\r\n        <InputLabel id=\"select-label\">Sort by</InputLabel>\r\n        <Select\r\n          labelId=\"select-label\"\r\n          id=\"select\"\r\n          onChange={handleSort}\r\n          label=\"Sort by\"\r\n        >\r\n          <MenuItem value=\"cases\">cases</MenuItem>\r\n          <MenuItem value=\"todayCases\">today cases</MenuItem>\r\n          <MenuItem value=\"deaths\">deaths</MenuItem>\r\n          <MenuItem value=\"todayDeaths\">today deaths</MenuItem>\r\n          <br />\r\n          <MenuItem value=\"lethality\">lethality</MenuItem>\r\n\r\n          <MenuItem value=\"casesPerOneMillion\">cases per 1M</MenuItem>\r\n          <MenuItem value=\"deathsPerOneMillion\">deaths per 1M</MenuItem>\r\n          <br />\r\n          <MenuItem value=\"tests\">tests</MenuItem>\r\n          <MenuItem value=\"testsPerOneMillion\">tests per 1M</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { TableRow, TableCell } from '@material-ui/core';\r\nimport { CountryProps } from '../interfaces';\r\nexport function AverageRow({\r\n  sortedStyle,\r\n  average,\r\n}: {\r\n  sortedStyle: string;\r\n  average: {\r\n    [key: string]: number;\r\n  };\r\n}) {\r\n  return (\r\n    <TableRow key=\"average\">\r\n      <TableCell\r\n        align=\"right\"\r\n        className={sortedStyle + ' font-bold'}\r\n      ></TableCell>\r\n\r\n      <TableCell component=\"th\" scope=\"row\" className={sortedStyle}>\r\n        <span className=\"font-bold\">Average*</span>\r\n      </TableCell>\r\n      {([\r\n        'cases',\r\n        'todayCases',\r\n        'deaths',\r\n        'todayDeaths',\r\n        'lethality',\r\n        'casesPerOneMillion',\r\n        'deathsPerOneMillion',\r\n        'tests',\r\n        'testsPerOneMillion',\r\n      ] as CountryProps[]).map((property) => {\r\n        return (\r\n          <TableCell align=\"right\" className={sortedStyle + ' font-bold'}>\r\n            <span className=\"font-bold\">\r\n              {average[property].toLocaleString()}\r\n              {property === 'lethality' && '.00%'}\r\n            </span>\r\n          </TableCell>\r\n        );\r\n      })}\r\n    </TableRow>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport {\r\n  Paper,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  Checkbox,\r\n} from '@material-ui/core';\r\nimport Country from '../models/country';\r\nimport { AverageRow } from './average-row';\r\nimport { CountryProps } from '../interfaces';\r\n\r\nimport './countries-table.css';\r\ninterface CountriesTableProps {\r\n  countries: Country[];\r\n  sortProperty: CountryProps;\r\n  onSelectCountry: any;\r\n  onShowStats: any;\r\n  selectedCountries: string[];\r\n  average: { [key: string]: number };\r\n}\r\nexport default function CountriesTable({\r\n  countries,\r\n  sortProperty = 'cases',\r\n  onSelectCountry,\r\n  onShowStats,\r\n  selectedCountries,\r\n  average,\r\n}: CountriesTableProps) {\r\n  const sortedStyle = 'font-bold';\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table size=\"small\" aria-label=\"a dense table\" stickyHeader>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell align=\"center\">\r\n              <span className=\"font-bold\">#</span>\r\n            </TableCell>\r\n            <TableCell>Country</TableCell>\r\n            <TableCell align=\"center\">Cases</TableCell>\r\n            <TableCell align=\"center\">Today cases</TableCell>\r\n            <TableCell align=\"center\">Deaths</TableCell>\r\n            <TableCell align=\"center\">Today deaths</TableCell>\r\n            <TableCell align=\"center\">Lethality</TableCell>\r\n            <TableCell align=\"center\">Cases per 1M</TableCell>\r\n            <TableCell align=\"center\">Deaths per 1M</TableCell>\r\n            <TableCell align=\"center\">Tests</TableCell>\r\n            <TableCell align=\"center\">Tests per 1M</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {/***Average row***/}\r\n          <AverageRow sortedStyle={sortedStyle} average={average} />\r\n\r\n          {countries.map((country, i) => {\r\n            return (\r\n              <TableRow key={country.country}>\r\n                <TableCell align=\"right\">\r\n                  <span className=\"flex items-center justify-end\">\r\n                    <span className=\"font-bold\">{country.ranking}</span>\r\n                    <Checkbox\r\n                      name={`${country.countryInfo?.iso2}`}\r\n                      onChange={(e) => onSelectCountry(e.target.name)}\r\n                      size=\"small\"\r\n                      checked={selectedCountries.includes(\r\n                        country.countryInfo?.iso2 || ''\r\n                      )}\r\n                    />\r\n                  </span>\r\n                </TableCell>\r\n\r\n                <TableCell\r\n                  className=\"cursor-pointer\"\r\n                  component=\"th\"\r\n                  scope=\"row\"\r\n                  onClick={() => onShowStats(country)}\r\n                >\r\n                  <span className=\"flex items-center\">\r\n                    <img\r\n                      className=\"w-4 mr-2\"\r\n                      src={`${country.countryInfo?.flag}`}\r\n                      alt=\"\"\r\n                    />\r\n                    <span>{country.country}</span>\r\n                  </span>\r\n                </TableCell>\r\n                {([\r\n                  'cases',\r\n                  'todayCases',\r\n                  'deaths',\r\n                  'todayDeaths',\r\n                  'lethality',\r\n                  'casesPerOneMillion',\r\n                  'deathsPerOneMillion',\r\n                  'tests',\r\n                  'testsPerOneMillion',\r\n                ] as CountryProps[]).map((property) => {\r\n                  let value =\r\n                    country[property] !== 0\r\n                      ? country[property].toLocaleString()\r\n                      : ' --';\r\n                  if (property === 'lethality') value += '%';\r\n\r\n                  return (\r\n                    <TableCell\r\n                      key={property}\r\n                      style={\r\n                        sortProperty === property\r\n                          ? {\r\n                              fontWeight: 'bold',\r\n                              borderRight: '1px solid rgba(0,0,0,.3)',\r\n                              borderLeft: '1px solid rgba(0,0,0,.3)',\r\n                              boxShadow: '0 0 5px rgba(0,0,0,.1)',\r\n                              zIndex: 11,\r\n                            }\r\n                          : undefined\r\n                      }\r\n                      className={`${getAverageStyle(\r\n                        country,\r\n                        property,\r\n                        average\r\n                      )}`}\r\n                      align=\"right\"\r\n                    >\r\n                      {value}\r\n                    </TableCell>\r\n                  );\r\n                })}\r\n              </TableRow>\r\n            );\r\n          })}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n\r\nconst getAverageStyle = (\r\n  country: Country,\r\n  property: CountryProps,\r\n  average: { [key: string]: number }\r\n) => {\r\n  const averageProperty = average[property];\r\n  const countryProperty = country[property];\r\n  const ratio = averageProperty / countryProperty;\r\n\r\n  if (countryProperty === 0) return 'bg-white';\r\n\r\n  if (property === 'tests' || property === 'testsPerOneMillion') {\r\n    if (ratio < 0.1) return 'bg-green-300';\r\n    if (ratio < 0.2) return 'bg-green-200';\r\n    if (ratio < 0.3) return 'bg-green-100';\r\n\r\n    if (averageProperty > countryProperty * 8) return 'bg-red-300';\r\n    if (averageProperty > countryProperty * 6) return 'bg-red-200';\r\n    if (averageProperty > countryProperty * 4) return 'bg-red-100';\r\n\r\n    return 'bg-white';\r\n  }\r\n\r\n  if (property === 'lethality') {\r\n    if (averageProperty > countryProperty * 6) return 'bg-green-300';\r\n    if (averageProperty > countryProperty * 4) return 'bg-green-200';\r\n    if (averageProperty > countryProperty * 2) return 'bg-green-100';\r\n\r\n    if (countryProperty > averageProperty * 3) return 'bg-red-300';\r\n    if (countryProperty > averageProperty * 2.5) return 'bg-red-200';\r\n    if (countryProperty > averageProperty * 2) return 'bg-red-100';\r\n\r\n    return 'bg-white';\r\n  }\r\n\r\n  if (ratio < 0.1) return 'bg-red-300';\r\n  if (ratio < 0.2) return 'bg-red-200';\r\n  if (ratio < 0.3) return 'bg-red-100';\r\n\r\n  if (averageProperty > countryProperty * 8) return 'bg-green-300';\r\n  if (averageProperty > countryProperty * 7) return 'bg-green-200';\r\n  if (averageProperty > countryProperty * 5) return 'bg-green-100';\r\n\r\n  return 'bg-white';\r\n};\r\n","import React from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport { Apps, FormatListNumbered } from '@material-ui/icons';\r\nimport isMobile from 'is-mobile';\r\n\r\ninterface ViewSelectorProps {\r\n  view: 'cards' | 'table';\r\n  onChangeView: (view: 'cards' | 'table') => void;\r\n}\r\nexport default function ViewSelector({\r\n  view,\r\n  onChangeView,\r\n}: ViewSelectorProps) {\r\n  const cardsViewText = isMobile() ? 'Cards' : 'Cards View';\r\n  const tableViewText = isMobile() ? 'Table' : 'Table View';\r\n  return (\r\n    <div className=\"ml-3 flex items-center\">\r\n      <Button\r\n        style={{ height: '100%' }}\r\n        onClick={() => {\r\n          const nextView = view === 'cards' ? 'table' : 'cards';\r\n          return onChangeView(nextView);\r\n        }}\r\n        variant=\"contained\"\r\n      >\r\n        {view !== 'cards' ? <Apps /> : <FormatListNumbered />}\r\n        <span className=\"ml-3 normal-case\">\r\n          {view !== 'cards' ? cardsViewText : tableViewText}\r\n        </span>\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","export default class Country {\r\n  country: string = '';\r\n  countryInfo:\r\n    | {\r\n        _id: number | null;\r\n        latitude: number;\r\n        longitude: number;\r\n        flag: string;\r\n        iso3: string | null;\r\n        iso2: string | null;\r\n      }\r\n    | undefined;\r\n  todayCases: number = 0;\r\n  deaths: number = 0;\r\n  todayDeaths: number = 0;\r\n  recovered: number = 0;\r\n  critical: number = 0;\r\n  deathsPerOneMillion: number = 0;\r\n  updated: number = 0;\r\n  tests: number = 0;\r\n  testsPerOneMillion: number = 0;\r\n  active: number = 0;\r\n  cases: number = 0;\r\n  casesPerOneMillion: number = 0;\r\n  isNewData: boolean = false;\r\n  ranking: number = 0;\r\n  public get lethality() {\r\n    const lethalityString = (\r\n      this.deaths &&\r\n      this.cases &&\r\n      (this.deaths / this.cases) * 100\r\n    ).toFixed(2);\r\n\r\n    const result = Number(lethalityString);\r\n    return result;\r\n  }\r\n  toJSON() {\r\n    return { ...this, lethality: this.lethality };\r\n  }\r\n}\r\n","import Country from '../models/country';\r\nimport { CountryProps, HistoricalCountry } from '../interfaces';\r\n\r\nconst countriesUrl = 'https://corona.lmao.ninja/v2/countries';\r\nexport async function getCountriesJson(\r\n  minCases: number,\r\n  sortProperty: CountryProps\r\n) {\r\n  let countriesJson: Country[] = [];\r\n\r\n  try {\r\n    countriesJson = await await (await fetch(countriesUrl)).json();\r\n    const countries = countriesJson\r\n      .filter((c) => c.cases > minCases)\r\n      .sort((a, b) => b[sortProperty] - a[sortProperty])\r\n      .map((c) => Object.assign(new Country(), c));\r\n\r\n    countries.forEach((c, i) => (c.ranking = i + 1));\r\n\r\n    return countries;\r\n  } catch (error) {\r\n    console.log(error);\r\n    return [];\r\n  }\r\n}\r\n\r\nconst countryUrl = (countryName: string) =>\r\n  `https://corona.lmao.ninja/v2/historical/${countryName}?lastdays=95`;\r\nexport async function getCountryReport(countryName: string) {\r\n  const countryJson = (await await (\r\n    await fetch(countryUrl(countryName))\r\n  ).json()) as HistoricalCountry;\r\n  const timeline = countryJson.timeline;\r\n  const cases = timeline.cases as { [key: string]: number };\r\n  const deaths = timeline.deaths as { [key: string]: number };\r\n  const days = Object.keys(timeline.cases)\r\n    .map((k, i, arr) => {\r\n      let items = k.split('/');\r\n      if (items[0].length === 1) items[0] = '0' + items[0];\r\n      if (items[1].length === 1) items[1] = '0' + items[1];\r\n\r\n      const date = getMonthAbb(items[0]) + ' ' + items[1];\r\n\r\n      const acumulatedCases: number = cases[k];\r\n      const acumulatedDeaths = deaths[k];\r\n\r\n      let todayCases =\r\n        i === 0 ? acumulatedCases : acumulatedCases - cases[arr[i - 1]];\r\n      let todayDeaths =\r\n        i === 0 ? acumulatedDeaths : acumulatedDeaths - deaths[arr[i - 1]];\r\n\r\n      return {\r\n        date: date,\r\n        cases: acumulatedCases,\r\n        todayCases,\r\n        deaths: acumulatedDeaths,\r\n        todayDeaths,\r\n      };\r\n    })\r\n    .filter((d) => d.cases !== 0)\r\n    //WTF this is sorted by WHAT?!\r\n    .sort();\r\n\r\n  return days;\r\n}\r\n\r\nconst getMonthAbb = (x: string) => {\r\n  const months = [\r\n    'Jan',\r\n    'Feb',\r\n    'Mar',\r\n    'Apr',\r\n    'May',\r\n    'Jun',\r\n    'Jul',\r\n    'Aug',\r\n    'Sep',\r\n    'Oct',\r\n    'Nov',\r\n    'Dez',\r\n  ];\r\n  const monthNumber = Number(x) - 1;\r\n  return months[monthNumber];\r\n};\r\n","import React from 'react';\r\nimport {\r\n  LineChart,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Legend,\r\n  Line,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n} from 'recharts';\r\n\r\ninterface ReportProps {\r\n  report: { date: string; cases: number; deaths: number }[];\r\n  scale: 'log' | 'linear';\r\n}\r\n\r\nconst deathsColor = '#F44336';\r\nconst casesColor = 'rgb(0, 136, 254)';\r\nexport default function ReportLineChart({ report, scale }: ReportProps) {\r\n  return (\r\n    <div className=\"mb-4\">\r\n      <h3 className=\"bg-gray-100 p-2 mb-2 font-bold\">\r\n        Evolution of cases and deaths since {report[0].date}{' '}\r\n        <span className=\"bg-yellow-400 px-2 font-normal rounded-lg\">\r\n          {scale} scale\r\n        </span>\r\n      </h3>\r\n      <div\r\n        style={{\r\n          width: '100%',\r\n          height: 200,\r\n          maxWidth: 500,\r\n          padding: '10px 10px 0',\r\n          color: 'white',\r\n          margin: '0 auto',\r\n          backgroundColor: 'rgba(0,0,0,.9)',\r\n          borderRadius: 10,\r\n        }}\r\n      >\r\n        <ResponsiveContainer>\r\n          <LineChart data={report} barSize=\"big\">\r\n            <XAxis\r\n              dataKey={'date'}\r\n              allowDataOverflow={true}\r\n              stroke=\"darkgray\"\r\n            />\r\n            <YAxis\r\n              dataKey=\"cases\"\r\n              scale={scale}\r\n              domain={[1, 'auto']}\r\n              stroke=\"darkgray\"\r\n            />\r\n            <CartesianGrid strokeDasharray=\"1 1\" />\r\n            <Tooltip />\r\n            <Legend />\r\n            <Line\r\n              type=\"monotone\"\r\n              dataKey=\"cases\"\r\n              stroke={'rgba(0, 136, 254, 0.82)'}\r\n              dot={{ r: 3, fill: casesColor }}\r\n            />{' '}\r\n            <Line\r\n              type=\"linear\"\r\n              dataKey=\"deaths\"\r\n              stroke={'red'}\r\n              dot={{ r: 3, fill: deathsColor }}\r\n            />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport {\r\n  XAxis,\r\n  YAxis,\r\n  Bar,\r\n  BarChart,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n  Legend,\r\n  ReferenceLine,\r\n} from 'recharts';\r\ninterface ReportBarchartProps {\r\n  report: {\r\n    date: string;\r\n    cases: number;\r\n    deaths: number;\r\n    todayCases: number;\r\n    todayDeaths: number;\r\n  }[];\r\n  field: 'todayCases' | 'todayDeaths';\r\n}\r\nconst deathsColor = '#F44336';\r\nconst casesColor = 'rgb(0, 136, 254)';\r\nexport default function ReportBarChart({ report, field }: ReportBarchartProps) {\r\n  const data = report.slice(-14);\r\n  const average =\r\n    data.map((a) => a[field]).reduce((a, b) => a + b) / data.length;\r\n  return (\r\n    <div className=\"mb-4\">\r\n      <h3 className=\"bg-gray-100 p-2 mb-2 font-bold\">\r\n        {field.replace('today', '')} per day in the last 2 weeks{' '}\r\n        <span\r\n          className={`font-normal px-1 rounded ${\r\n            field === 'todayDeaths' && average > 300\r\n              ? average > 600\r\n                ? 'bg-red-800 text-white'\r\n                : 'bg-red-500 text-white'\r\n              : 'bg-gray-300'\r\n          }`}\r\n        >\r\n          average {Math.round(average)}\r\n        </span>\r\n      </h3>\r\n      <div\r\n        style={{\r\n          width: '100%',\r\n          height: 200,\r\n          maxWidth: 500,\r\n          padding: 10,\r\n          color: 'white',\r\n          margin: '0 auto',\r\n          backgroundColor: 'rgba(0,0,0,.9)',\r\n          borderRadius: 10,\r\n        }}\r\n      >\r\n        <ResponsiveContainer>\r\n          <BarChart data={data} height={200} width={500}>\r\n            <Tooltip content={<CustomTooltip />} />\r\n            <Legend />\r\n            <XAxis dataKey=\"date\" stroke=\"darkgray\" />\r\n            <YAxis dataKey={field} stroke=\"darkgray\" />\r\n\r\n            <Bar\r\n              name={field.replace('today', '').toLowerCase()}\r\n              dataKey={field}\r\n              fill={field === 'todayCases' ? casesColor : deathsColor}\r\n            />\r\n            <ReferenceLine\r\n              y={average}\r\n              stroke=\"yellow\"\r\n              strokeDasharray=\"3 3\"\r\n              isFront={true}\r\n            />\r\n          </BarChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nconst CustomTooltip = ({ active, payload, label }: any) => {\r\n  if (active) {\r\n    return (\r\n      <div className=\"bg-white text-black border-gray-100 p-2 border border-solid\">\r\n        <p>{label}</p>\r\n\r\n        <p className=\"label\">{`${payload[0].name}: ${payload[0].value}`}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { getCountryReport } from '../services/dataProvider';\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  CircularProgress,\r\n} from '@material-ui/core';\r\nimport Country from '../models/country';\r\nimport ReportLineChart from './report-linechart';\r\nimport ReportBarChart from './report-barchart';\r\nimport './countries-statistics.css';\r\nexport interface CountryStatsProps {\r\n  country: Country;\r\n  open: boolean;\r\n  onClose: any;\r\n}\r\nexport default function CountryStats({\r\n  country,\r\n  open,\r\n  onClose,\r\n}: CountryStatsProps) {\r\n  const [report, setReport] = useState<\r\n    {\r\n      date: string;\r\n      cases: number;\r\n      deaths: number;\r\n      todayCases: number;\r\n      todayDeaths: number;\r\n    }[]\r\n  >([]);\r\n  useEffect(() => {\r\n    const getCountryStats = async () => {\r\n      const loadedReport = await getCountryReport(country.country);\r\n      setReport(loadedReport);\r\n    };\r\n    getCountryStats();\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={open}\r\n        aria-labelledby=\"responsive-dialog-title\"\r\n        onClose={onClose}\r\n        fullWidth={true}\r\n        maxWidth=\"sm\"\r\n      >\r\n        <DialogTitle\r\n          id=\"responsive-dialog-title\"\r\n          className=\"bg-gray-200 mb-4  flex justify-center\"\r\n        >\r\n          <div className=\"flex items-center\">\r\n            <img\r\n              className=\"w-4 h-4 rounded-full mr-4\"\r\n              src={`${country.countryInfo?.flag}`}\r\n              alt=\"\"\r\n            />\r\n            <span className=\"font-bold\">{country.country}</span>\r\n          </div>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          {report.length ? (\r\n            <>\r\n              <ReportLineChart report={report} scale=\"log\" />\r\n\r\n              <ReportLineChart report={report} scale=\"linear\" />\r\n              <ReportBarChart report={report} field=\"todayCases\" />\r\n              <ReportBarChart report={report} field=\"todayDeaths\" />\r\n            </>\r\n          ) : (\r\n            <span>\r\n              <CircularProgress color=\"primary\" size={20} /> Loading country\r\n              data\r\n            </span>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus color=\"primary\" onClick={onClose}>\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport CountryCard from '../components/country-card';\r\nimport PropertiesSorter from '../components/country-properties-sorter';\r\nimport Country from '../models/country';\r\nimport './countries-container.css';\r\nimport { CircularProgress, FormControlLabel, Switch } from '@material-ui/core';\r\nimport CountriesTable from '../components/countries-table';\r\nimport ViewSelector from '../components/view-selector';\r\nimport { CountryProps as CountryKeys } from '../interfaces';\r\nimport { getCountriesJson, getCountryReport } from '../services/dataProvider';\r\nimport CountryStats from '../components/country-statistics';\r\nexport default function CountriesContainer() {\r\n  //__STATE HOOKS\r\n\r\n  const [countries, setCountries] = useState<Country[]>([]);\r\n  const [selectedCountries, setSelectedCountries] = useState<string[]>([]);\r\n  const [selectedCountry, setSelectedCountry] = useState<Country>();\r\n\r\n  //hook initialized with last access to page data is\r\n  const [previousCountries, setPreviousCountries] = useState<Country[]>(\r\n    (JSON.parse(localStorage.getItem('countries') || '[]') as Country[]) || []\r\n  );\r\n  const [sortProperty, setSortProperty] = useState<CountryKeys>('cases');\r\n  const [view, setView] = useState<'cards' | 'table'>('table');\r\n  const [filterFlag, setFilterFlag] = useState<boolean>(false);\r\n\r\n  //__EFFECT HOOK | FETCH THE DATA\r\n  useEffect(() => {\r\n    const getCountries = async () => {\r\n      const newData = await getCountriesJson(1000, 'cases');\r\n\r\n      //if no error, store  in local storage\r\n      if (newData.length) {\r\n        try {\r\n          const countriesString = JSON.stringify(newData);\r\n\r\n          //countries field in local storage\r\n          localStorage.setItem('countries', countriesString);\r\n\r\n          //set state of countries\r\n          setCountries(newData as Country[]);\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      }\r\n    };\r\n\r\n    //fetch countries data\r\n    getCountries();\r\n  }, []);\r\n\r\n  //__ SORT\r\n  const handleSort = (property: CountryKeys = 'cases') => {\r\n    // sorts by descendig by field\r\n    const sortByProperty = (a: Country, b: Country): 1 | -1 | 0 => {\r\n      if (b[property]! > a[property]!) return 1;\r\n      if (b[property]! < a[property]!) return -1;\r\n      return 0;\r\n    };\r\n\r\n    var sortedNewCountries = countries.slice().sort(sortByProperty);\r\n    //ranking according the property ascending\r\n    sortedNewCountries.forEach((c, i) => (c.ranking = i + 1));\r\n\r\n    var sortedPreviousCountries = previousCountries\r\n      .slice()\r\n      .sort(sortByProperty);\r\n\r\n    //store state\r\n    setSortProperty(property);\r\n    setCountries(sortedNewCountries);\r\n    setPreviousCountries(sortedPreviousCountries);\r\n  };\r\n\r\n  //__ VIEW TYPE: cards | table\r\n  const handleChangeView = (view: 'cards' | 'table') => {\r\n    setView(view);\r\n  };\r\n\r\n  //__ ADD COUNTRY TO THE LIST OF SELECTED COUNTRIES\r\n  const handleSelectCountry = (countryName: string) => {\r\n    let newSelectedCountries = selectedCountries.slice();\r\n    const position = newSelectedCountries.indexOf(countryName);\r\n    if (position !== -1) {\r\n      newSelectedCountries.splice(position, 1);\r\n    } else {\r\n      newSelectedCountries.push(countryName);\r\n    }\r\n    if (newSelectedCountries.length === 0) {\r\n      setFilterFlag(false);\r\n    }\r\n    setSelectedCountries(newSelectedCountries);\r\n  };\r\n\r\n  //__ SELECT A COUNTRY\r\n  const handleShowCountryStatistics = (country?: Country) => {\r\n    setSelectedCountry(country);\r\n  };\r\n\r\n  //__ UNSELECT THE COUNTRY\r\n  const handleCloseCountryStats = () => {\r\n    setSelectedCountry(undefined);\r\n  };\r\n\r\n  //__ SWITCH ON THE FILTER\r\n  const toggleFilterFlag = (e: any, filter: boolean) => {\r\n    setFilterFlag(filter);\r\n  };\r\n\r\n  //data is going to be displayed; filtered or not\r\n  let dataToRender = countries || previousCountries;\r\n  const average = getTruncatedAverage(dataToRender);\r\n\r\n  //filtered data\r\n  if (filterFlag) {\r\n    dataToRender = dataToRender.filter((country) =>\r\n      selectedCountries.includes(country.countryInfo?.iso2 || '')\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"flex mb-2  flex-auto  p-2\"\r\n        style={{ backgroundColor: 'rgba(0, 0, 0, 0.04)' }}\r\n      >\r\n        <PropertiesSorter onSort={handleSort} />\r\n        <ViewSelector view={view} onChangeView={handleChangeView} />\r\n\r\n        {/*//__SWITCH TO ACTIVATE THE  FILTER */}\r\n        <span className=\"ml-4 flex\">\r\n          <FormControlLabel\r\n            control={\r\n              <Switch\r\n                name=\"checkedA\"\r\n                size=\"small\"\r\n                checked={filterFlag}\r\n                onChange={toggleFilterFlag}\r\n                disabled={selectedCountries.length === 0}\r\n              />\r\n            }\r\n            label=\"Filter\"\r\n          />\r\n        </span>\r\n      </div>\r\n\r\n      {/*//__ MODAL WITH COUNTRY STATS */}\r\n      {selectedCountry && (\r\n        <CountryStats\r\n          country={selectedCountry}\r\n          open={selectedCountry !== undefined}\r\n          onClose={handleCloseCountryStats}\r\n        />\r\n      )}\r\n      {/*//__ SPINNER */}\r\n      {dataToRender?.length === 0 && (\r\n        <div className=\"flex justify-center items-center\">\r\n          <CircularProgress color=\"primary\" size={20} />\r\n          <span className=\"ml-2\">Loading</span>\r\n        </div>\r\n      )}\r\n\r\n      {/*//__ COUNTRIES  RENDERED */}\r\n      {view === 'cards' ? (\r\n        <div className=\"grid md:grid-cols-3 gap-4  xl:grid-cols-3\">\r\n          {dataToRender?.map((country) => (\r\n            <CountryCard\r\n              onSelectCountry={handleShowCountryStatistics}\r\n              country={country}\r\n              key={country.country}\r\n              activeProperty={sortProperty}\r\n              previousData={previousCountries.find(\r\n                (c) => c.country === country.country\r\n              )}\r\n            />\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        dataToRender.length !== 0 && (\r\n          <CountriesTable\r\n            onShowStats={handleShowCountryStatistics}\r\n            average={average}\r\n            onSelectCountry={handleSelectCountry}\r\n            countries={dataToRender}\r\n            sortProperty={sortProperty}\r\n            selectedCountries={selectedCountries}\r\n          />\r\n        )\r\n      )}\r\n    </>\r\n  );\r\n}\r\nconst getTruncatedAverage = (countries: Country[]) => {\r\n  const properties: CountryKeys[] = [\r\n    'cases',\r\n    'todayCases',\r\n    'deaths',\r\n    'todayDeaths',\r\n    'lethality',\r\n    'casesPerOneMillion',\r\n    'deathsPerOneMillion',\r\n    'tests',\r\n    'testsPerOneMillion',\r\n  ];\r\n  let truncatedAverage: { [key: string]: number } = {};\r\n\r\n  properties.forEach((property) => {\r\n    const truncated = countries.map((c: any) => c[property] as number).sort();\r\n    if (countries.length > 10) {\r\n      truncated.pop();\r\n      truncated.pop();\r\n      truncated.shift();\r\n      truncated.shift();\r\n    }\r\n\r\n    const sum = truncated.reduce((a, b) => a + b, 0);\r\n    const average = sum / countries.length;\r\n    const result = Math.round(average);\r\n    truncatedAverage[property] = result;\r\n  });\r\n\r\n  return truncatedAverage;\r\n};\r\n","import React from 'react';\r\nexport default function Navbar() {\r\n  return (\r\n    <nav className=\" p-6 mb-3 w-screen top-0 bg-white shadow-md uppercase z-10\">\r\n      <div className=\"container mx-auto flex items-center justify-between flex-wrap \">\r\n        <div className=\" flex items-center flex-shrink-0 text-black mr-6\">\r\n          <img src=\"/corona-info/favicon.png\" alt=\"\" className=\"w-8 mr-2\" />\r\n          <span className=\"font-semibold text-2xl tracking-tight \">\r\n            Corona Info\r\n          </span>\r\n        </div>\r\n        {/* <div className=\"block lg:hidden\">\r\n          <button className=\"flex items-center px-3 py-2 border rounded text-black border-gray-400 hover:text-white hover:border-white\">\r\n            <svg\r\n              className=\"fill-current h-3 w-3\"\r\n              viewBox=\"0 0 20 20\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n            >\r\n              <title>Menu</title>\r\n              <path d=\"M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z\" />\r\n            </svg>\r\n          </button>\r\n        </div> */}\r\n        {/* <div className=\"w-full block flex-grow lg:flex lg:items-center lg:w-auto\">\r\n          <div className=\"text-sm lg:flex-grow\">\r\n            <a\r\n              href=\"#responsive-header\"\r\n              className=\"block mt-4 lg:inline-block lg:mt-0 text-gray-600 hover:text-gray-700 mr-4\"\r\n            >\r\n              Countries\r\n            </a>\r\n          </div>\r\n        </div> */}\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport CountriesContainer from './containers/countries-container';\r\nimport Navbar from './components/navbar';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\" \">\r\n      <Navbar />\r\n      <div className=\"container  bg-white mx-auto\">\r\n        <CountriesContainer />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './reset-ui.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\r\nimport { grey, red } from '@material-ui/core/colors';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: grey,\r\n\r\n    secondary: {\r\n      main: '#2196f3',\r\n    },\r\n    success: red,\r\n  },\r\n});\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <MuiThemeProvider theme={theme}>\r\n      <App />\r\n    </MuiThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}