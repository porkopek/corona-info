{"version":3,"sources":["components/card-property.tsx","components/country-card.tsx","components/countries-filter-menu.tsx","models/country.ts","containers/countries-container.tsx","components/navbar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CardProperty","text","value","isActive","className","CountryCard","country","activeProperty","style","backgroundColor","src","countryInfo","flag","alt","isNewData","cases","toLocaleString","todayCases","deaths","todayDeaths","lethality","toFixed","casesPerOneMillion","deathsPerOneMillion","FilterMenu","onSort","htmlFor","id","onChange","e","currentTarget","Country","recovered","critical","updated","tests","testsPerOneMillion","active","this","track","NovelCovid","CountriesContainer","useState","JSON","parse","localStorage","getItem","countries","setCountries","sortProperty","setSortProperty","useEffect","a","newCountries","filter","c","sort","b","map","Object","assign","i","length","countriesString","stringify","setItem","error","console","log","getCountries","property","sortFunction","slice","key","Navbar","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.46f08eb9.chunk.js","sourcesContent":["import React from 'react';\r\nexport default function CardProperty({\r\n  text,\r\n  value,\r\n  isActive = false,\r\n}: {\r\n  text: string;\r\n  value?: string;\r\n  isActive?: boolean;\r\n}) {\r\n  const activeState = 'font-bold';\r\n  return (\r\n    <div\r\n      className={`flex justify-between  ${isActive && activeState} rounded-lg`}\r\n    >\r\n      <span>{text}:</span>\r\n\r\n      <div>{value}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport CardProperty from './card-property';\r\nimport Country from '../models/country';\r\nimport './country-card.css';\r\ninterface CountryCardProps {\r\n  country: Country;\r\n  activeProperty: keyof Country;\r\n}\r\nexport default function CountryCard({\r\n  country,\r\n  activeProperty,\r\n}: CountryCardProps) {\r\n  var color = 'green';\r\n  return (\r\n    <div className=\"shadow rounded-md overflow-hidden hover:shadow-md  transition duration-300 ease-in-out cursor-pointer\">\r\n      {/* header */}\r\n      <div\r\n        className=\"w-full flex justify-center items-center p-5\"\r\n        style={{ backgroundColor: 'rgba(0,0,0,.04)' }}\r\n      >\r\n        <img src={country.countryInfo?.flag} alt=\"\" className=\"h-4 mr-2\" />\r\n        <h3 className=\"font-bold uppercase text-black text-lg\">\r\n          {country.country}\r\n        </h3>\r\n        {country.isNewData && <div className=\"blob green\"></div>}\r\n      </div>\r\n      {/* body */}\r\n      <div className=\"px-6 py-2\">\r\n        <CardProperty\r\n          text=\"Cases\"\r\n          value={country.cases.toLocaleString()}\r\n          isActive={activeProperty === 'cases'}\r\n        />\r\n        <CardProperty\r\n          text=\"Today cases\"\r\n          value={country.todayCases?.toLocaleString()}\r\n          isActive={activeProperty == 'todayCases'}\r\n        />\r\n        <br className=\"my-3\" />\r\n        <CardProperty\r\n          text=\"Deaths\"\r\n          value={country.deaths?.toLocaleString()}\r\n          isActive={activeProperty == 'deaths'}\r\n        />\r\n        <CardProperty\r\n          text=\"Today deaths\"\r\n          value={country.todayDeaths?.toLocaleString()}\r\n          isActive={activeProperty == 'todayDeaths'}\r\n        />\r\n        <br className=\"my-3\" />\r\n        <CardProperty\r\n          text=\"Lethality\"\r\n          value={country.lethality ? country.lethality.toFixed(2) + '%' : '0%'}\r\n          isActive={activeProperty == 'lethality'}\r\n        />\r\n        <CardProperty\r\n          text=\"Cases per 1M\"\r\n          value={country.casesPerOneMillion.toLocaleString()}\r\n          isActive={activeProperty == 'casesPerOneMillion'}\r\n        />\r\n        <CardProperty\r\n          text=\"Deaths per 1M\"\r\n          value={country.deathsPerOneMillion.toLocaleString()}\r\n          isActive={activeProperty == 'deathsPerOneMillion'}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { ICountry, CountryCardProps } from '../interfaces';\r\nimport Country from '../models/country';\r\n\r\ninterface FilterMenuOptions {\r\n  onSort: (property?: keyof Country, mode?: 'ASC' | 'DESC') => void;\r\n}\r\n\r\nexport default function FilterMenu({ onSort }: FilterMenuOptions) {\r\n  const handleSort = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    const value = e.currentTarget.value as keyof Country;\r\n\r\n    onSort(value);\r\n  };\r\n  return (\r\n    <div className=\"p-5\">\r\n      <label htmlFor=\"country-properties\">Sort by</label>\r\n\r\n      <select\r\n        id=\"country-properties\"\r\n        className=\"border-gray-300 border px-4 py-2 ml-2 rounded-md\"\r\n        onChange={handleSort}\r\n      >\r\n        <option value=\"cases\">cases</option>\r\n        <option value=\"todayCases\">today cases</option>\r\n        <option value=\"deaths\">deaths</option>\r\n        <option value=\"todayDeaths\">today deaths</option>\r\n        <option value=\"lethality\">lethality</option>\r\n        <option value=\"casesPerOneMillion\">cases per 1M</option>\r\n        <option value=\"deathsPerOneMillion\">deaths per 1M</option>\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n","import { ICountry } from '../interfaces';\r\n\r\nexport default class Country {\r\n  [key: string]: any;\r\n  country?: string;\r\n  countryInfo:\r\n    | {\r\n        _id: number | null;\r\n        latitude: number;\r\n        longitude: number;\r\n        flag: string;\r\n        iso3: string | null;\r\n        iso2: string | null;\r\n      }\r\n    | undefined;\r\n  todayCases: number = 0;\r\n  deaths: number = 0;\r\n  todayDeaths: number = 0;\r\n  recovered: number = 0;\r\n  critical: number = 0;\r\n  deathsPerOneMillion: number = 0;\r\n  updated: number = 0;\r\n  tests: number = 0;\r\n  testsPerOneMillion: number = 0;\r\n  active: number = 0;\r\n  cases: number = 0;\r\n  casesPerOneMillion: number = 0;\r\n  isNewData: boolean = false;\r\n  public get lethality() {\r\n    return this.deaths && this.cases && (this.deaths / this.cases) * 100;\r\n  }\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { TransitionGroup, Transition } from 'react-transition-group';\r\nimport { NovelCovid } from 'novelcovid';\r\nimport CountryCard from '../components/country-card';\r\nimport { ICountry, CountryCardProps } from '../interfaces';\r\nimport FilterMenu from '../components/countries-filter-menu';\r\nimport Country from '../models/country';\r\nimport './countries-container.css';\r\nconst track = new NovelCovid();\r\nexport default function CountriesContainer() {\r\n  const [countries, setCountries] = useState<Country[]>(\r\n    (JSON.parse(localStorage.getItem('countries') || '[]') as Country[]) || []\r\n  );\r\n  const [sortProperty, setSortProperty] = useState<keyof Country>('cases');\r\n\r\n  useEffect(() => {\r\n    // get the countries data\r\n    const getCountries = async () => {\r\n      const newCountries = (((await track.countries()) as unknown[]) as Country[])\r\n        .filter((c) => c.cases > 1000)\r\n        .sort((a, b) => b.cases - a.cases)\r\n        .map((c) => Object.assign(new Country(), c))\r\n        .map((c, i) => {\r\n          if (countries[i]?.cases !== c.cases) {\r\n            c.isNewData = true;\r\n          }\r\n          return c;\r\n        });\r\n\r\n      if (newCountries.length) {\r\n        try {\r\n          const countriesString = JSON.stringify(newCountries);\r\n          localStorage.setItem('countries', countriesString);\r\n          setCountries(newCountries as Country[]);\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      }\r\n    };\r\n\r\n    //WATCH\r\n    getCountries();\r\n  }, []);\r\n\r\n  const handleSort = (\r\n    property: keyof Country = 'cases',\r\n    type: 'ASC' | 'DESC' = 'DESC'\r\n  ) => {\r\n    setSortProperty(property);\r\n    const sortFunction = (a: Country, b: Country): 1 | -1 | 0 => {\r\n      if (b[property] > a[property]) return 1;\r\n      if (b[property] < a[property]) return -1;\r\n      return 0;\r\n    };\r\n    var newCountries = countries.slice().sort(sortFunction);\r\n\r\n    setCountries(newCountries);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FilterMenu onSort={handleSort} />\r\n\r\n      <div className=\"grid md:grid-cols-3 gap-4  xl:grid-cols-3\">\r\n        {countries?.map((country) => (\r\n          <CountryCard\r\n            country={country}\r\n            key={country.country}\r\n            activeProperty={sortProperty}\r\n          />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nexport default function Navbar() {\r\n  return (\r\n    <nav className=\" p-6 fixed w-screen top-0 bg-white shadow-md uppercase\">\r\n      <div className=\"container mx-auto flex items-center justify-between flex-wrap \">\r\n        <div className=\" flex items-center flex-shrink-0 text-black mr-6\">\r\n          <img src=\"/corona-info/favicon.png\" alt=\"\" className=\"w-8 mr-2\" />\r\n          <span className=\"font-semibold text-2xl tracking-tight \">\r\n            Corona Info\r\n          </span>\r\n        </div>\r\n        {/* <div className=\"block lg:hidden\">\r\n          <button className=\"flex items-center px-3 py-2 border rounded text-black border-gray-400 hover:text-white hover:border-white\">\r\n            <svg\r\n              className=\"fill-current h-3 w-3\"\r\n              viewBox=\"0 0 20 20\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n            >\r\n              <title>Menu</title>\r\n              <path d=\"M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z\" />\r\n            </svg>\r\n          </button>\r\n        </div> */}\r\n        {/* <div className=\"w-full block flex-grow lg:flex lg:items-center lg:w-auto\">\r\n          <div className=\"text-sm lg:flex-grow\">\r\n            <a\r\n              href=\"#responsive-header\"\r\n              className=\"block mt-4 lg:inline-block lg:mt-0 text-gray-600 hover:text-gray-700 mr-4\"\r\n            >\r\n              Countries\r\n            </a>\r\n          </div>\r\n        </div> */}\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n","import React from 'react';\nimport CountriesContainer from './containers/countries-container';\nimport Navbar from './components/navbar';\n\nfunction App() {\n  return (\n    <div className=\" \">\n      <Navbar />\n      <div className=\"container max-w-5xl bg-white mx-auto\">\n        <CountriesContainer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}